<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='cpArbiterThread' type='{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}'>
<field declared_type='struct cpArbiter*' name='next' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<field declared_type='struct cpArbiter*' name='prev' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
</struct>
<struct name='cpArray' type='{cpArray=&quot;num&quot;i&quot;max&quot;i&quot;arr&quot;^^v}'>
<field declared_type='int' name='num' type='i'/>
<field declared_type='int' name='max' type='i'/>
<field declared_type='void**' name='arr' type='^^v'/>
</struct>
<struct name='cpPolylineSet' type='{cpPolylineSet=&quot;count&quot;i&quot;capacity&quot;i&quot;lines&quot;^^{cpPolyline}}'>
<field declared_type='int' name='count' type='i'/>
<field declared_type='int' name='capacity' type='i'/>
<field declared_type='cpPolyline**' name='lines' type='^^{cpPolyline}'/>
</struct>
<struct name='cpPostStepCallback' type='{cpPostStepCallback=&quot;func&quot;^?&quot;key&quot;^v&quot;data&quot;^v}'>
<field declared_type='cpPostStepFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='key' type='^v'/>
<field declared_type='void*' name='data' type='^v'/>
</struct>
<struct name='cpShapeClass' type='{cpShapeClass=&quot;type&quot;i&quot;cacheData&quot;^?&quot;destroy&quot;^?&quot;pointQuery&quot;^?&quot;segmentQuery&quot;^?}'>
<field declared_type='cpShapeType' name='type' type='i'/>
<field declared_type='cpShapeCacheDataImpl' function_pointer='true' name='cacheData' type='^?'>
<arg declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</field>
<field declared_type='cpShapeDestroyImpl' function_pointer='true' name='destroy' type='^?'>
<arg declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpShapePointQueryImpl' function_pointer='true' name='pointQuery' type='^?'>
<arg const='true' declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpVect' type='{cpVect=ii}'/>
<arg declared_type='cpPointQueryInfo*' type='^{cpPointQueryInfo=^{cpShape}{cpVect=ii}i{cpVect=ii}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpShapeSegmentQueryImpl' function_pointer='true' name='segmentQuery' type='^?'>
<arg const='true' declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpVect' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' type='{cpVect=ii}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='cpSegmentQueryInfo*' type='^{cpSegmentQueryInfo=^{cpShape}{cpVect=ii}{cpVect=ii}i}'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='cpShapeFilter' type='{cpShapeFilter=&quot;group&quot;I&quot;categories&quot;I&quot;mask&quot;I}'>
<field declared_type='cpGroup' name='group' type='L'/>
<field declared_type='cpBitmask' name='categories' type='I'/>
<field declared_type='cpBitmask' name='mask' type='I'/>
</struct>
<struct name='cpSpaceDebugColor' type='{cpSpaceDebugColor=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'>
<field declared_type='float' name='r' type='f'/>
<field declared_type='float' name='g' type='f'/>
<field declared_type='float' name='b' type='f'/>
<field declared_type='float' name='a' type='f'/>
</struct>
<struct name='cpSpatialIndex' type='{cpSpatialIndex=&quot;klass&quot;^{cpSpatialIndexClass}&quot;bbfunc&quot;^?&quot;staticIndex&quot;^{cpSpatialIndex}&quot;dynamicIndex&quot;^{cpSpatialIndex}}'>
<field declared_type='cpSpatialIndexClass*' name='klass' type='^{cpSpatialIndexClass=^?^?^?i^?^?^?^?^?^?^?}'/>
<field declared_type='cpSpatialIndexBBFunc' function_pointer='true' name='bbfunc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</field>
<field declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<field declared_type='cpSpatialIndex*' name='dynamicIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</struct>
<opaque name='cpArbiter' type='^{cpArbiter=}'/>
<opaque name='cpBB' type='^{cpBB=}'/>
<opaque name='cpBBTree' type='^{cpBBTree=}'/>
<opaque name='cpCircleShape' type='^{cpCircleShape=}'/>
<opaque name='cpConstraintClass' type='^{cpConstraintClass=}'/>
<opaque name='cpContactBufferHeader' type='^{cpContactBufferHeader=}'/>
<opaque name='cpContactPointSet' type='^{cpContactPointSet=}'/>
<opaque name='cpDampedRotarySpring' type='^{cpDampedRotarySpring=}'/>
<opaque name='cpDampedSpring' type='^{cpDampedSpring=}'/>
<opaque name='cpGearJoint' type='^{cpGearJoint=}'/>
<opaque name='cpGrooveJoint' type='^{cpGrooveJoint=}'/>
<opaque name='cpHashSet' type='^{cpHashSet=}'/>
<opaque name='cpHastySpace' type='^{cpHastySpace=}'/>
<opaque name='cpMat2x2' type='^{cpMat2x2=}'/>
<opaque name='cpPinJoint' type='^{cpPinJoint=}'/>
<opaque name='cpPivotJoint' type='^{cpPivotJoint=}'/>
<opaque name='cpPointQueryInfo' type='^{cpPointQueryInfo=}'/>
<opaque name='cpPolyShape' type='^{cpPolyShape=}'/>
<opaque name='cpPolyline' type='^{cpPolyline=}'/>
<opaque name='cpRatchetJoint' type='^{cpRatchetJoint=}'/>
<opaque name='cpRotaryLimitJoint' type='^{cpRotaryLimitJoint=}'/>
<opaque name='cpSegmentQueryInfo' type='^{cpSegmentQueryInfo=}'/>
<opaque name='cpSegmentShape' type='^{cpSegmentShape=}'/>
<opaque name='cpSimpleMotor' type='^{cpSimpleMotor=}'/>
<opaque name='cpSimpleMotorJoint' type='^{cpSimpleMotorJoint=}'/>
<opaque name='cpSlideJoint' type='^{cpSlideJoint=}'/>
<opaque name='cpSpaceDebugDrawOptions' type='^{cpSpaceDebugDrawOptions=}'/>
<opaque name='cpSpaceHash' type='^{cpSpaceHash=}'/>
<opaque name='cpSpatialIndexClass' type='^{cpSpatialIndexClass=}'/>
<opaque name='cpSweep1D' type='^{cpSweep1D=}'/>
<opaque name='cpTransform' type='^{cpTransform=}'/>
<constant const='true' declared_type='cpShapeFilter' name='CP_SHAPE_FILTER_ALL' type='{cpShapeFilter=III}'/>
<constant const='true' declared_type='cpShapeFilter' name='CP_SHAPE_FILTER_NONE' type='{cpShapeFilter=III}'/>
<constant declared_type='int' name='cpBody' type='i'/>
<constant declared_type='int' name='cpBodyType' type='i'/>
<constant declared_type='int' name='cpBool' type='i'/>
<constant declared_type='int' name='cpCollisionHandler' type='i'/>
<constant declared_type='struct cpCollisionHandler' name='cpCollisionHandlerDoNothing' type='{cpCollisionHandler=iiii^?^?i}'/>
<constant declared_type='int' name='cpConstraint' type='i'/>
<constant declared_type='int' name='cpDataPointer' type='i'/>
<constant declared_type='int' name='cpFloat' type='i'/>
<constant declared_type='int' name='cpShape' type='i'/>
<constant declared_type='int' name='cpSpace' type='i'/>
<constant declared_type='int' name='cpTimestamp' type='i'/>
<constant const='true' declared_type='cpTransform' name='cpTransformIdentity' type='{cpTransform=iiiiii}'/>
<constant declared_type='int' name='cpVect' type='i'/>
<constant const='true' declared_type='char*' name='cpVersionString' type='*'/>
<constant const='true' declared_type='struct cpVect' name='cpvzero' type='{cpVect=ii}'/>
<enum name='CPFLOAT_MIN' value='1.1754944E-38'/>
<enum name='CP_ALLOW_PRIVATE_ACCESS' value='1'/>
<enum name='CP_ALL_CATEGORIES' value='4294967295'/>
<enum name='CP_ARBITER_STATE_CACHED' value='3'/>
<enum name='CP_ARBITER_STATE_FIRST_COLLISION' value='0'/>
<enum name='CP_ARBITER_STATE_IGNORE' value='2'/>
<enum name='CP_ARBITER_STATE_INVALIDATED' value='4'/>
<enum name='CP_ARBITER_STATE_NORMAL' value='1'/>
<enum name='CP_BODY_TYPE_DYNAMIC' value='0'/>
<enum name='CP_BODY_TYPE_KINEMATIC' value='1'/>
<enum name='CP_BODY_TYPE_STATIC' value='2'/>
<enum name='CP_BUFFER_BYTES' value='32768'/>
<enum name='CP_CIRCLE_SHAPE' value='0'/>
<enum name='CP_HASH_COEF' value='3344921057'/>
<enum name='CP_MAX_CONTACTS_PER_ARBITER' value='2'/>
<enum name='CP_NO_GROUP' value='0'/>
<enum name='CP_NUM_SHAPES' value='3'/>
<enum name='CP_POLY_SHAPE' value='2'/>
<enum name='CP_POLY_SHAPE_INLINE_ALLOC' value='6'/>
<enum name='CP_SEGMENT_SHAPE' value='1'/>
<enum name='CP_SPACE_DEBUG_DRAW_COLLISION_POINTS' value='4'/>
<enum name='CP_SPACE_DEBUG_DRAW_CONSTRAINTS' value='2'/>
<enum name='CP_SPACE_DEBUG_DRAW_SHAPES' value='1'/>
<enum name='CP_USE_DOUBLES' value='0'/>
<enum name='CP_VERSION_MAJOR' value='7'/>
<enum name='CP_VERSION_MINOR' value='0'/>
<enum name='CP_VERSION_RELEASE' value='1'/>
<enum name='CP_WILDCARD_COLLISION_TYPE' value='4294967295'/>
<enum name='MAGIC_EPSILON' value='1e-5'/>
<enum name='cpFalse' value='0'/>
<enum name='cpTrue' value='1'/>
<function inline='true' name='CircleSegmentQuery'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpVect' name='center' type='{cpVect=ii}'/>
<arg declared_type='int' name='r1' type='i'/>
<arg declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<arg declared_type='int' name='r2' type='i'/>
<arg declared_type='cpSegmentQueryInfo*' name='info' type='^{cpSegmentQueryInfo=^{cpShape}{cpVect=ii}{cpVect=ii}i}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='apply_bias_impulse'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='j' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='r' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='apply_bias_impulses'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='r1' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='r2' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='j' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='apply_impulse'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='j' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='r' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='apply_impulses'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='r1' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='r2' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='j' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='bias_coef'>
<arg declared_type='int' name='errorBias' type='i'/>
<arg declared_type='int' name='dt' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterApplyCachedImpulse'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='int' name='dt_coef' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterApplyImpulse'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterCallWildcardBeginA'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterCallWildcardBeginB'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterCallWildcardPostSolveA'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterCallWildcardPostSolveB'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterCallWildcardPreSolveA'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterCallWildcardPreSolveB'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterCallWildcardSeparateA'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterCallWildcardSeparateB'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetBodies'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpBody**' name='a' type='^^{cpBody}'/>
<arg declared_type='struct cpBody**' name='b' type='^^{cpBody}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetContactPointSet'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='cpContactPointSet' type='{cpContactPointSet=i{cpVect=ii}i}'/>
</function>
<function name='cpArbiterGetCount'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterGetDepth'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='int' name='i' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterGetFriction'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterGetNormal'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpArbiterGetPointA'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='int' name='i' type='i'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpArbiterGetPointB'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='int' name='i' type='i'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpArbiterGetRestitution'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterGetShapes'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpShape**' name='a' type='^^{cpShape}'/>
<arg declared_type='struct cpShape**' name='b' type='^^{cpShape}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetSurfaceVelocity'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpArbiterGetUserData'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterIgnore'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterInit'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpShape*' name='a' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpShape*' name='b' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpArbiter*' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
</function>
<function name='cpArbiterIsFirstContact'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterIsRemoval'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpArbiterNext'>
<arg declared_type='cpArbiter*' name='node' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='cpArbiter*' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
</function>
<function name='cpArbiterPreStep'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='int' name='dt' type='i'/>
<arg declared_type='int' name='bias' type='i'/>
<arg declared_type='int' name='slop' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetContactPointSet'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='cpContactPointSet*' name='set' type='^{cpContactPointSet=i{cpVect=ii}i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetFriction'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='int' name='friction' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetRestitution'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='int' name='restitution' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetSurfaceVelocity'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpVect' name='vr' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetUserData'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='int' name='userData' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpArbiterThreadForBody'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='struct cpArbiterThread*' type='^{cpArbiterThread=^{cpArbiter}^{cpArbiter}}'/>
</function>
<function name='cpArbiterTotalImpulse'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpArbiterTotalKE'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterUnthread'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterUpdate'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpCollisionInfo*' name='info' type='^{cpCollisionInfo=^{cpShape}^{cpShape}I{cpVect=ii}i^{cpContact}}'/>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpAreaForCircle'>
<arg declared_type='int' name='r1' type='i'/>
<arg declared_type='int' name='r2' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpAreaForPoly'>
<arg const='true' declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='struct cpVect*' name='verts' type='^{cpVect=ii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpAreaForSegment'>
<arg declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArrayContains'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<arg declared_type='void*' name='ptr' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArrayDeleteObj'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayFree'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayFreeEach'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<arg declared_type='void (*)(void *)' function_pointer='true' name='freeFunc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayNew'>
<arg declared_type='int' name='size' type='i'/>
<retval declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
</function>
<function name='cpArrayPop'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpArrayPush'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<arg declared_type='void*' name='object' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpBBArea'>
<arg declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpBBCenter'>
<arg declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpBBClampVect'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpBBContainsBB'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg const='true' declared_type='cpBB' name='other' type='{cpBB=iiii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpBBContainsVect'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpBBExpand'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</function>
<function inline='true' name='cpBBIntersects'>
<arg const='true' declared_type='cpBB' name='a' type='{cpBB=iiii}'/>
<arg const='true' declared_type='cpBB' name='b' type='{cpBB=iiii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpBBIntersectsSegment'>
<arg declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpBBMerge'>
<arg const='true' declared_type='cpBB' name='a' type='{cpBB=iiii}'/>
<arg const='true' declared_type='cpBB' name='b' type='{cpBB=iiii}'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</function>
<function inline='true' name='cpBBMergedArea'>
<arg declared_type='cpBB' name='a' type='{cpBB=iiii}'/>
<arg declared_type='cpBB' name='b' type='{cpBB=iiii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpBBNew'>
<arg const='true' declared_type='int' name='l' type='i'/>
<arg const='true' declared_type='int' name='b' type='i'/>
<arg const='true' declared_type='int' name='r' type='i'/>
<arg const='true' declared_type='int' name='t' type='i'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</function>
<function inline='true' name='cpBBNewForCircle'>
<arg const='true' declared_type='struct cpVect' name='p' type='{cpVect=ii}'/>
<arg const='true' declared_type='int' name='r' type='i'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</function>
<function inline='true' name='cpBBNewForExtents'>
<arg const='true' declared_type='struct cpVect' name='c' type='{cpVect=ii}'/>
<arg const='true' declared_type='int' name='hw' type='i'/>
<arg const='true' declared_type='int' name='hh' type='i'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</function>
<function inline='true' name='cpBBOffset'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</function>
<function inline='true' name='cpBBSegmentQuery'>
<arg declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpBBTreeAlloc'>
<retval declared_type='cpBBTree*' type='^{cpBBTree=}'/>
</function>
<function name='cpBBTreeInit'>
<arg declared_type='cpBBTree*' name='tree' type='^{cpBBTree=}'/>
<arg declared_type='cpSpatialIndexBBFunc' function_pointer='true' name='bbfunc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpBBTreeNew'>
<arg declared_type='cpSpatialIndexBBFunc' function_pointer='true' name='bbfunc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpBBTreeOptimize'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBBTreeSetVelocityFunc'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='int' name='func' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpBBWrapVect'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpBodyAccumulateMassFromShapes'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyActivate'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyActivateStatic'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpShape*' name='filter' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyAddShape'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyAlloc'>
<retval declared_type='struct cpBody*' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
</function>
<function name='cpBodyApplyForceAtLocalPoint'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='force' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='point' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyApplyForceAtWorldPoint'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='force' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='point' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyApplyImpulseAtLocalPoint'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='impulse' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='point' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyApplyImpulseAtWorldPoint'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='impulse' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='point' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyDestroy'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachArbiter'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='cpBodyArbiterIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachConstraint'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='cpBodyConstraintIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachShape'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='cpBodyShapeIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyFree'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyGetAngle'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpBodyGetAngularVelocity'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpBodyGetCenterOfGravity'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpBodyGetForce'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpBodyGetMass'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpBodyGetMoment'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpBodyGetPosition'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpBodyGetRotation'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpBodyGetSpace'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='struct cpSpace*' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
</function>
<function name='cpBodyGetTorque'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpBodyGetType'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='enum cpBodyType' type='i'/>
</function>
<function name='cpBodyGetUserData'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpBodyGetVelocity'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpBodyGetVelocityAtLocalPoint'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='point' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpBodyGetVelocityAtWorldPoint'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='point' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpBodyInit'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='mass' type='i'/>
<arg declared_type='int' name='moment' type='i'/>
<retval declared_type='struct cpBody*' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
</function>
<function name='cpBodyIsSleeping'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpBodyKineticEnergy'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpBodyLocalToWorld'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg const='true' declared_type='struct cpVect' name='point' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpBodyNew'>
<arg declared_type='int' name='mass' type='i'/>
<arg declared_type='int' name='moment' type='i'/>
<retval declared_type='struct cpBody*' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
</function>
<function name='cpBodyNewKinematic'>
<retval declared_type='struct cpBody*' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
</function>
<function name='cpBodyNewStatic'>
<retval declared_type='struct cpBody*' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
</function>
<function name='cpBodyRemoveConstraint'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyRemoveShape'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetAngle'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='a' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetAngularVelocity'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='angularVelocity' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetCenterOfGravity'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='cog' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetForce'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='force' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetMass'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='m' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetMoment'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='i' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetPosition'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='pos' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetPositionUpdateFunc'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='cpBodyPositionFunc' function_pointer='true' name='positionFunc' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='CGFloat' type='f'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetTorque'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='torque' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetType'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='enum cpBodyType' name='type' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetUserData'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='userData' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetVelocity'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='velocity' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetVelocityUpdateFunc'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='cpBodyVelocityFunc' function_pointer='true' name='velocityFunc' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='CGFloat' type='f'/>
<arg declared_type='CGFloat' type='f'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySleep'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySleepWithGroup'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='group' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyUpdatePosition'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='dt' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyUpdateVelocity'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='gravity' type='{cpVect=ii}'/>
<arg declared_type='int' name='damping' type='i'/>
<arg declared_type='int' name='dt' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyWorldToLocal'>
<arg const='true' declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg const='true' declared_type='struct cpVect' name='point' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpBoxShapeInit'>
<arg declared_type='cpPolyShape*' name='poly' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}ii^{cpSplittingPlane}i}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}ii^{cpSplittingPlane}i}'/>
</function>
<function name='cpBoxShapeInit2'>
<arg declared_type='cpPolyShape*' name='poly' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}ii^{cpSplittingPlane}i}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='cpBB' name='box' type='{cpBB=iiii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}ii^{cpSplittingPlane}i}'/>
</function>
<function name='cpBoxShapeNew'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpBoxShapeNew2'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='cpBB' name='box' type='{cpBB=iiii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpCentroidForPoly'>
<arg const='true' declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='struct cpVect*' name='verts' type='^{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpCheckSignedArea'>
<arg const='true' declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='c' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpCircleShapeAlloc'>
<retval declared_type='cpCircleShape*' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}{cpVect=ii}{cpVect=ii}i}'/>
</function>
<function name='cpCircleShapeGetOffset'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpCircleShapeGetRadius'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpCircleShapeInit'>
<arg declared_type='cpCircleShape*' name='circle' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}{cpVect=ii}{cpVect=ii}i}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='radius' type='i'/>
<arg declared_type='struct cpVect' name='offset' type='{cpVect=ii}'/>
<retval declared_type='cpCircleShape*' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}{cpVect=ii}{cpVect=ii}i}'/>
</function>
<function name='cpCircleShapeNew'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='radius' type='i'/>
<arg declared_type='struct cpVect' name='offset' type='{cpVect=ii}'/>
<retval declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpCircleShapeSetOffset'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpVect' name='offset' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpCircleShapeSetRadius'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpClosetPointOnSegment'>
<arg const='true' declared_type='struct cpVect' name='p' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpCollide'>
<arg const='true' declared_type='struct cpShape*' name='a' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg const='true' declared_type='struct cpShape*' name='b' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpCollisionID' name='id' type='I'/>
<arg declared_type='struct cpContact*' name='contacts' type='^{cpContact={cpVect=ii}{cpVect=ii}iiiiiiiI}'/>
<retval declared_type='struct cpCollisionInfo' type='{cpCollisionInfo=^{cpShape}^{cpShape}I{cpVect=ii}i^{cpContact}}'/>
</function>
<function inline='true' name='cpConstraintActivateBodies'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintDestroy'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintFree'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintGetBodyA'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpBody*' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
</function>
<function name='cpConstraintGetBodyB'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpBody*' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
</function>
<function name='cpConstraintGetCollideBodies'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintGetErrorBias'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintGetImpulse'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintGetMaxBias'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintGetMaxForce'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintGetPostSolveFunc'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='cpConstraintPostSolveFunc' function_pointer='true' type='^?'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpSpace*' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='cpConstraintGetPreSolveFunc'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='cpConstraintPreSolveFunc' function_pointer='true' type='^?'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpSpace*' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='cpConstraintGetSpace'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpSpace*' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
</function>
<function name='cpConstraintGetUserData'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintInit'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg const='true' declared_type='struct cpConstraintClass*' name='klass' type='^{cpConstraintClass=^?^?^?i}'/>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintIsDampedRotarySpring'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintIsDampedSpring'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintIsGearJoint'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintIsGrooveJoint'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintIsPinJoint'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintIsPivotJoint'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintIsRatchetJoint'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintIsRotaryLimitJoint'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintIsSimpleMotor'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintIsSlideJoint'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpConstraintNext'>
<arg declared_type='struct cpConstraint*' name='node' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpConstraintSetCollideBodies'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='collideBodies' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetErrorBias'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='errorBias' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetMaxBias'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='maxBias' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetMaxForce'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='maxForce' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetPostSolveFunc'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='cpConstraintPostSolveFunc' function_pointer='true' name='postSolveFunc' type='^?'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpSpace*' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetPreSolveFunc'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='cpConstraintPreSolveFunc' function_pointer='true' name='preSolveFunc' type='^?'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpSpace*' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetUserData'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='userData' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpContactBufferGetArray'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='struct cpContact*' type='^{cpContact={cpVect=ii}{cpVect=ii}iiiiiiiI}'/>
</function>
<function name='cpConvexHull'>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='struct cpVect*' name='verts' type='^{cpVect=ii}'/>
<arg declared_type='struct cpVect*' name='result' type='^{cpVect=ii}'/>
<arg declared_type='int*' name='first' type='^i'/>
<arg declared_type='int' name='tol' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedRotarySpringAlloc'>
<retval declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiiiiii}'/>
</function>
<function name='cpDampedRotarySpringGetDamping'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedRotarySpringGetRestAngle'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedRotarySpringGetSpringTorqueFunc'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedRotarySpringGetStiffness'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedRotarySpringInit'>
<arg declared_type='cpDampedRotarySpring*' name='joint' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiiiiii}'/>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='restAngle' type='i'/>
<arg declared_type='int' name='stiffness' type='i'/>
<arg declared_type='int' name='damping' type='i'/>
<retval declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiiiiii}'/>
</function>
<function name='cpDampedRotarySpringNew'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='restAngle' type='i'/>
<arg declared_type='int' name='stiffness' type='i'/>
<arg declared_type='int' name='damping' type='i'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpDampedRotarySpringSetDamping'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='damping' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetRestAngle'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='restAngle' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetSpringTorqueFunc'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='springTorqueFunc' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetStiffness'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='stiffness' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringAlloc'>
<retval declared_type='cpDampedSpring*' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}iiiiii{cpVect=ii}{cpVect=ii}i{cpVect=ii}i}'/>
</function>
<function name='cpDampedSpringGetAnchorA'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpDampedSpringGetAnchorB'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpDampedSpringGetDamping'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedSpringGetRestLength'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedSpringGetSpringForceFunc'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedSpringGetStiffness'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedSpringInit'>
<arg declared_type='cpDampedSpring*' name='joint' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}iiiiii{cpVect=ii}{cpVect=ii}i{cpVect=ii}i}'/>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<arg declared_type='int' name='restLength' type='i'/>
<arg declared_type='int' name='stiffness' type='i'/>
<arg declared_type='int' name='damping' type='i'/>
<retval declared_type='cpDampedSpring*' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}iiiiii{cpVect=ii}{cpVect=ii}i{cpVect=ii}i}'/>
</function>
<function name='cpDampedSpringNew'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<arg declared_type='int' name='restLength' type='i'/>
<arg declared_type='int' name='stiffness' type='i'/>
<arg declared_type='int' name='damping' type='i'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpDampedSpringSetAnchorA'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetAnchorB'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetDamping'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='damping' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetRestLength'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='restLength' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetSpringForceFunc'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='springForceFunc' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetStiffness'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='stiffness' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGearJointAlloc'>
<retval declared_type='cpGearJoint*' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiiii}'/>
</function>
<function name='cpGearJointGetPhase'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpGearJointGetRatio'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpGearJointInit'>
<arg declared_type='cpGearJoint*' name='joint' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiiii}'/>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='phase' type='i'/>
<arg declared_type='int' name='ratio' type='i'/>
<retval declared_type='cpGearJoint*' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiiii}'/>
</function>
<function name='cpGearJointNew'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='phase' type='i'/>
<arg declared_type='int' name='ratio' type='i'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpGearJointSetPhase'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='phase' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGearJointSetRatio'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='ratio' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointAlloc'>
<retval declared_type='cpGrooveJoint*' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}i{cpVect=ii}{cpVect=ii}{cpMat2x2=iiii}{cpVect=ii}{cpVect=ii}}'/>
</function>
<function name='cpGrooveJointGetAnchorB'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpGrooveJointGetGrooveA'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpGrooveJointGetGrooveB'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpGrooveJointInit'>
<arg declared_type='cpGrooveJoint*' name='joint' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}i{cpVect=ii}{cpVect=ii}{cpMat2x2=iiii}{cpVect=ii}{cpVect=ii}}'/>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='groove_a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='groove_b' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<retval declared_type='cpGrooveJoint*' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}i{cpVect=ii}{cpVect=ii}{cpMat2x2=iiii}{cpVect=ii}{cpVect=ii}}'/>
</function>
<function name='cpGrooveJointNew'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='groove_a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='groove_b' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpGrooveJointSetAnchorB'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointSetGrooveA'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpVect' name='grooveA' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointSetGrooveB'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpVect' name='grooveB' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetCount'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpHashSetEach'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='cpHashSetIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetFilter'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='int' name='func' type='i'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetFind'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='cpHashValue' name='hash' type='L'/>
<arg declared_type='void*' name='ptr' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetFree'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetInsert'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='cpHashValue' name='hash' type='L'/>
<arg declared_type='void*' name='ptr' type='^v'/>
<arg declared_type='cpHashSetTransFunc' function_pointer='true' name='trans' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void*' type='^v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetNew'>
<arg declared_type='int' name='size' type='i'/>
<arg declared_type='int' name='eqlFunc' type='i'/>
<retval declared_type='cpHashSet*' type='^{cpHashSet=}'/>
</function>
<function name='cpHashSetRemove'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='cpHashValue' name='hash' type='L'/>
<arg declared_type='void*' name='ptr' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetSetDefaultValue'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='void*' name='default_value' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHastySpaceFree'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHastySpaceGetThreads'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='unsigned long' type='L'/>
</function>
<function name='cpHastySpaceNew'>
<retval declared_type='struct cpSpace*' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
</function>
<function name='cpHastySpaceSetThreads'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='unsigned long' name='threads' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHastySpaceStep'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='dt' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpLoopIndexes'>
<arg const='true' declared_type='struct cpVect*' name='verts' type='^{cpVect=ii}'/>
<arg declared_type='int' name='count' type='i'/>
<arg declared_type='int*' name='start' type='^i'/>
<arg declared_type='int*' name='end' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpMarchHard'>
<arg declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg declared_type='unsigned long' name='x_samples' type='L'/>
<arg declared_type='unsigned long' name='y_samples' type='L'/>
<arg declared_type='int' name='threshold' type='i'/>
<arg declared_type='cpMarchSegmentFunc' function_pointer='true' name='segment' type='^?'>
<arg declared_type='struct cpVect' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' type='{cpVect=ii}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='segment_data' type='^v'/>
<arg declared_type='int' name='sample' type='i'/>
<arg declared_type='void*' name='sample_data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpMarchSoft'>
<arg declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg declared_type='unsigned long' name='x_samples' type='L'/>
<arg declared_type='unsigned long' name='y_samples' type='L'/>
<arg declared_type='int' name='threshold' type='i'/>
<arg declared_type='cpMarchSegmentFunc' function_pointer='true' name='segment' type='^?'>
<arg declared_type='struct cpVect' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' type='{cpVect=ii}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='segment_data' type='^v'/>
<arg declared_type='int' name='sample' type='i'/>
<arg declared_type='void*' name='sample_data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpMat2x2New'>
<arg declared_type='int' name='a' type='i'/>
<arg declared_type='int' name='b' type='i'/>
<arg declared_type='int' name='c' type='i'/>
<arg declared_type='int' name='d' type='i'/>
<retval declared_type='cpMat2x2' type='{cpMat2x2=iiii}'/>
</function>
<function inline='true' name='cpMat2x2Transform'>
<arg declared_type='cpMat2x2' name='m' type='{cpMat2x2=iiii}'/>
<arg declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpMessage' variadic='true'>
<arg const='true' declared_type='char*' name='condition' type='*'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<arg declared_type='int' name='isError' type='i'/>
<arg declared_type='int' name='isHardError' type='i'/>
<arg const='true' declared_type='char*' name='message' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpMomentForBox'>
<arg declared_type='int' name='m' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpMomentForBox2'>
<arg declared_type='int' name='m' type='i'/>
<arg declared_type='cpBB' name='box' type='{cpBB=iiii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpMomentForCircle'>
<arg declared_type='int' name='m' type='i'/>
<arg declared_type='int' name='r1' type='i'/>
<arg declared_type='int' name='r2' type='i'/>
<arg declared_type='struct cpVect' name='offset' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpMomentForPoly'>
<arg declared_type='int' name='m' type='i'/>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='struct cpVect*' name='verts' type='^{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='offset' type='{cpVect=ii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpMomentForSegment'>
<arg declared_type='int' name='m' type='i'/>
<arg declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpPinJointAlloc'>
<retval declared_type='cpPinJoint*' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}i{cpVect=ii}{cpVect=ii}{cpVect=ii}iii}'/>
</function>
<function name='cpPinJointGetAnchorA'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpPinJointGetAnchorB'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpPinJointGetDist'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpPinJointInit'>
<arg declared_type='cpPinJoint*' name='joint' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}i{cpVect=ii}{cpVect=ii}{cpVect=ii}iii}'/>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<retval declared_type='cpPinJoint*' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}i{cpVect=ii}{cpVect=ii}{cpVect=ii}iii}'/>
</function>
<function name='cpPinJointNew'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpPinJointSetAnchorA'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPinJointSetAnchorB'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPinJointSetDist'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='dist' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPivotJointAlloc'>
<retval declared_type='cpPivotJoint*' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpMat2x2=iiii}{cpVect=ii}{cpVect=ii}}'/>
</function>
<function name='cpPivotJointGetAnchorA'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpPivotJointGetAnchorB'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpPivotJointInit'>
<arg declared_type='cpPivotJoint*' name='joint' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpMat2x2=iiii}{cpVect=ii}{cpVect=ii}}'/>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<retval declared_type='cpPivotJoint*' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpMat2x2=iiii}{cpVect=ii}{cpVect=ii}}'/>
</function>
<function name='cpPivotJointNew'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='pivot' type='{cpVect=ii}'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpPivotJointNew2'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpPivotJointSetAnchorA'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPivotJointSetAnchorB'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolyShapeAlloc'>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}ii^{cpSplittingPlane}i}'/>
</function>
<function name='cpPolyShapeGetCount'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpPolyShapeGetRadius'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpPolyShapeGetVert'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpPolyShapeInit'>
<arg declared_type='cpPolyShape*' name='poly' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}ii^{cpSplittingPlane}i}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='struct cpVect*' name='verts' type='^{cpVect=ii}'/>
<arg declared_type='cpTransform' name='transform' type='{cpTransform=iiiiii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}ii^{cpSplittingPlane}i}'/>
</function>
<function name='cpPolyShapeInitRaw'>
<arg declared_type='cpPolyShape*' name='poly' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}ii^{cpSplittingPlane}i}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='struct cpVect*' name='verts' type='^{cpVect=ii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}ii^{cpSplittingPlane}i}'/>
</function>
<function name='cpPolyShapeNew'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='struct cpVect*' name='verts' type='^{cpVect=ii}'/>
<arg declared_type='cpTransform' name='transform' type='{cpTransform=iiiiii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpPolyShapeNewRaw'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='struct cpVect*' name='verts' type='^{cpVect=ii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpPolyShapeSetRadius'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolyShapeSetVerts'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='count' type='i'/>
<arg declared_type='struct cpVect*' name='verts' type='^{cpVect=ii}'/>
<arg declared_type='cpTransform' name='transform' type='{cpTransform=iiiiii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolyShapeSetVertsRaw'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='count' type='i'/>
<arg declared_type='struct cpVect*' name='verts' type='^{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolylineConvexDecomposition'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=iii}'/>
<arg declared_type='int' name='tol' type='i'/>
<retval declared_type='cpPolylineSet*' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
</function>
<function name='cpPolylineFree'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=iii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolylineIsClosed'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=iii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpPolylineSetAlloc'>
<retval declared_type='cpPolylineSet*' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
</function>
<function name='cpPolylineSetCollectSegment'>
<arg declared_type='struct cpVect' name='v0' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg declared_type='cpPolylineSet*' name='lines' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolylineSetDestroy'>
<arg declared_type='cpPolylineSet*' name='set' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
<arg declared_type='int' name='freePolylines' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolylineSetFree'>
<arg declared_type='cpPolylineSet*' name='set' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
<arg declared_type='int' name='freePolylines' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolylineSetInit'>
<arg declared_type='cpPolylineSet*' name='set' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
<retval declared_type='cpPolylineSet*' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
</function>
<function name='cpPolylineSetNew'>
<retval declared_type='cpPolylineSet*' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
</function>
<function name='cpPolylineSimplifyCurves'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=iii}'/>
<arg declared_type='int' name='tol' type='i'/>
<retval declared_type='cpPolyline*' type='^{cpPolyline=iii}'/>
</function>
<function name='cpPolylineSimplifyVertexes'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=iii}'/>
<arg declared_type='int' name='tol' type='i'/>
<retval declared_type='cpPolyline*' type='^{cpPolyline=iii}'/>
</function>
<function name='cpPolylineToConvexHull'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=iii}'/>
<arg declared_type='int' name='tol' type='i'/>
<retval declared_type='cpPolyline*' type='^{cpPolyline=iii}'/>
</function>
<function name='cpRatchetJointAlloc'>
<retval declared_type='cpRatchetJoint*' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiiii}'/>
</function>
<function name='cpRatchetJointGetAngle'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpRatchetJointGetPhase'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpRatchetJointGetRatchet'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpRatchetJointInit'>
<arg declared_type='cpRatchetJoint*' name='joint' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiiii}'/>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='phase' type='i'/>
<arg declared_type='int' name='ratchet' type='i'/>
<retval declared_type='cpRatchetJoint*' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiiii}'/>
</function>
<function name='cpRatchetJointNew'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='phase' type='i'/>
<arg declared_type='int' name='ratchet' type='i'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpRatchetJointSetAngle'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='angle' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRatchetJointSetPhase'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='phase' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRatchetJointSetRatchet'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='ratchet' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRotaryLimitJointAlloc'>
<retval declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiii}'/>
</function>
<function name='cpRotaryLimitJointGetMax'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpRotaryLimitJointGetMin'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpRotaryLimitJointInit'>
<arg declared_type='cpRotaryLimitJoint*' name='joint' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiii}'/>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='min' type='i'/>
<arg declared_type='int' name='max' type='i'/>
<retval declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iiiii}'/>
</function>
<function name='cpRotaryLimitJointNew'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='min' type='i'/>
<arg declared_type='int' name='max' type='i'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpRotaryLimitJointSetMax'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='max' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRotaryLimitJointSetMin'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='min' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentShapeAlloc'>
<retval declared_type='cpSegmentShape*' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}i{cpVect=ii}{cpVect=ii}}'/>
</function>
<function name='cpSegmentShapeGetA'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpSegmentShapeGetB'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpSegmentShapeGetNormal'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpSegmentShapeGetRadius'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSegmentShapeInit'>
<arg declared_type='cpSegmentShape*' name='seg' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}i{cpVect=ii}{cpVect=ii}}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='cpSegmentShape*' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}i{cpVect=ii}{cpVect=ii}}'/>
</function>
<function name='cpSegmentShapeNew'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSegmentShapeSetEndpoints'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentShapeSetNeighbors'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpVect' name='prev' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='next' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentShapeSetRadius'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='radius' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpShapeActive'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeCacheBB'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</function>
<function name='cpShapeDestroy'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpShapeFilterNew'>
<arg declared_type='cpGroup' name='group' type='L'/>
<arg declared_type='cpBitmask' name='categories' type='I'/>
<arg declared_type='cpBitmask' name='mask' type='I'/>
<retval declared_type='cpShapeFilter' type='{cpShapeFilter=III}'/>
</function>
<function inline='true' name='cpShapeFilterReject'>
<arg declared_type='cpShapeFilter' name='a' type='{cpShapeFilter=III}'/>
<arg declared_type='cpShapeFilter' name='b' type='{cpShapeFilter=III}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeFree'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeGetArea'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeGetBB'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</function>
<function name='cpShapeGetBody'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='struct cpBody*' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
</function>
<function name='cpShapeGetCenterOfGravity'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpShapeGetCollisionType'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpCollisionType' type='L'/>
</function>
<function name='cpShapeGetDensity'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeGetElasticity'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeGetFilter'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpShapeFilter' type='{cpShapeFilter=III}'/>
</function>
<function name='cpShapeGetFriction'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeGetMass'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeGetMoment'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeGetSensor'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeGetSpace'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='struct cpSpace*' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
</function>
<function name='cpShapeGetSurfaceVelocity'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpShapeGetUserData'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeInit'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg const='true' declared_type='cpShapeClass*' name='klass' type='^{cpShapeClass=i^?^?^?^?}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpShapeMassInfo' name='massInfo' type='{cpShapeMassInfo=ii{cpVect=ii}i}'/>
<retval declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpShapePointQuery'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpVect' name='p' type='{cpVect=ii}'/>
<arg declared_type='cpPointQueryInfo*' name='out' type='^{cpPointQueryInfo=^{cpShape}{cpVect=ii}i{cpVect=ii}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeSegmentQuery'>
<arg const='true' declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<arg declared_type='int' name='radius' type='i'/>
<arg declared_type='cpSegmentQueryInfo*' name='info' type='^{cpSegmentQueryInfo=^{cpShape}{cpVect=ii}{cpVect=ii}i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpShapeSetBody'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetCollisionType'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpCollisionType' name='collisionType' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetDensity'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='density' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetElasticity'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='elasticity' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetFilter'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetFriction'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='friction' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetMass'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='mass' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetSensor'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='sensor' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetSurfaceVelocity'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpVect' name='surfaceVelocity' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetUserData'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='userData' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeUpdate'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpTransform' name='transform' type='{cpTransform=iiiiii}'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</function>
<function name='cpShapeUpdateFunc'>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='void*' name='unused' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapesCollide'>
<arg const='true' declared_type='struct cpShape*' name='a' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg const='true' declared_type='struct cpShape*' name='b' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpContactPointSet' type='{cpContactPointSet=i{cpVect=ii}i}'/>
</function>
<function name='cpSimpleMotorAlloc'>
<retval declared_type='cpSimpleMotor*' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iii}'/>
</function>
<function name='cpSimpleMotorGetRate'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSimpleMotorInit'>
<arg declared_type='cpSimpleMotor*' name='joint' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iii}'/>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='rate' type='i'/>
<retval declared_type='cpSimpleMotor*' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}iii}'/>
</function>
<function name='cpSimpleMotorNew'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='int' name='rate' type='i'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpSimpleMotorSetRate'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='rate' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointAlloc'>
<retval declared_type='cpSlideJoint*' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}ii{cpVect=ii}{cpVect=ii}{cpVect=ii}iii}'/>
</function>
<function name='cpSlideJointGetAnchorA'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpSlideJointGetAnchorB'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpSlideJointGetMax'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSlideJointGetMin'>
<arg const='true' declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSlideJointInit'>
<arg declared_type='cpSlideJoint*' name='joint' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}ii{cpVect=ii}{cpVect=ii}{cpVect=ii}iii}'/>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<arg declared_type='int' name='min' type='i'/>
<arg declared_type='int' name='max' type='i'/>
<retval declared_type='cpSlideJoint*' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}{cpVect=ii}{cpVect=ii}ii{cpVect=ii}{cpVect=ii}{cpVect=ii}iii}'/>
</function>
<function name='cpSlideJointNew'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<arg declared_type='int' name='min' type='i'/>
<arg declared_type='int' name='max' type='i'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpSlideJointSetAnchorA'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpVect' name='anchorA' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetAnchorB'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='struct cpVect' name='anchorB' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetMax'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='max' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetMin'>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<arg declared_type='int' name='min' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceActivateBody'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceAddBody'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='struct cpBody*' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
</function>
<function name='cpSpaceAddCollisionHandler'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='cpCollisionType' name='a' type='L'/>
<arg declared_type='cpCollisionType' name='b' type='L'/>
<retval declared_type='struct cpCollisionHandler*' type='^{cpCollisionHandler=iiii^?^?i}'/>
</function>
<function name='cpSpaceAddConstraint'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
</function>
<function name='cpSpaceAddDefaultCollisionHandler'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='struct cpCollisionHandler*' type='^{cpCollisionHandler=iiii^?^?i}'/>
</function>
<function name='cpSpaceAddPostStepCallback'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='cpPostStepFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='key' type='^v'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceAddShape'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceAddWildcardHandler'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='cpCollisionType' name='type' type='L'/>
<retval declared_type='struct cpCollisionHandler*' type='^{cpCollisionHandler=iiii^?^?i}'/>
</function>
<function name='cpSpaceAlloc'>
<retval declared_type='struct cpSpace*' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
</function>
<function name='cpSpaceArbiterSetFilter'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpSpaceArrayForBodyType'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='enum cpBodyType' name='type' type='i'/>
<retval declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
</function>
<function name='cpSpaceBBQuery'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<arg declared_type='cpSpaceBBQueryFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceCollideShapes'>
<arg declared_type='struct cpShape*' name='a' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='struct cpShape*' name='b' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpCollisionID' name='id' type='I'/>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='cpCollisionID' type='I'/>
</function>
<function name='cpSpaceContainsBody'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceContainsConstraint'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceContainsShape'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceDebugDraw'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='cpSpaceDebugDrawOptions*' name='options' type='^{cpSpaceDebugDrawOptions=^?^?^?^?^?i{cpSpaceDebugColor=ffff}^?{cpSpaceDebugColor=ffff}{cpSpaceDebugColor=ffff}i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceDestroy'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachBody'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='cpSpaceBodyIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachConstraint'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='cpSpaceConstraintIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachShape'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='cpSpaceShapeIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceFilterArbiters'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpShape*' name='filter' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceFree'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceGetCollisionBias'>
<arg const='true' declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceGetCollisionPersistence'>
<arg const='true' declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceGetCollisionSlop'>
<arg const='true' declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceGetCurrentTimeStep'>
<arg const='true' declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceGetDamping'>
<arg const='true' declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceGetGravity'>
<arg const='true' declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function name='cpSpaceGetIdleSpeedThreshold'>
<arg const='true' declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceGetIterations'>
<arg const='true' declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceGetPostStepCallback'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='void*' name='key' type='^v'/>
<retval declared_type='cpPostStepCallback*' type='^{cpPostStepCallback=^?^v^v}'/>
</function>
<function name='cpSpaceGetSleepTimeThreshold'>
<arg const='true' declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceGetStaticBody'>
<arg const='true' declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='struct cpBody*' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
</function>
<function name='cpSpaceGetUserData'>
<arg const='true' declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceHashAlloc'>
<retval declared_type='cpSpaceHash*' type='^{cpSpaceHash=}'/>
</function>
<function name='cpSpaceHashInit'>
<arg declared_type='cpSpaceHash*' name='hash' type='^{cpSpaceHash=}'/>
<arg declared_type='int' name='celldim' type='i'/>
<arg declared_type='int' name='numcells' type='i'/>
<arg declared_type='cpSpatialIndexBBFunc' function_pointer='true' name='bbfunc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSpaceHashNew'>
<arg declared_type='int' name='celldim' type='i'/>
<arg declared_type='int' name='cells' type='i'/>
<arg declared_type='cpSpatialIndexBBFunc' function_pointer='true' name='bbfunc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSpaceHashResize'>
<arg declared_type='cpSpaceHash*' name='hash' type='^{cpSpaceHash=}'/>
<arg declared_type='int' name='celldim' type='i'/>
<arg declared_type='int' name='numcells' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceInit'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='struct cpSpace*' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
</function>
<function name='cpSpaceIsLocked'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceLock'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceNew'>
<retval declared_type='struct cpSpace*' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
</function>
<function name='cpSpacePointQuery'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpVect' name='point' type='{cpVect=ii}'/>
<arg declared_type='int' name='maxDistance' type='i'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<arg declared_type='cpSpacePointQueryFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePointQueryNearest'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpVect' name='point' type='{cpVect=ii}'/>
<arg declared_type='int' name='maxDistance' type='i'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<arg declared_type='cpPointQueryInfo*' name='out' type='^{cpPointQueryInfo=^{cpShape}{cpVect=ii}i{cpVect=ii}}'/>
<retval declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceProcessComponents'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='dt' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePushContacts'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='count' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePushFreshContactBuffer'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexShape'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexShapesForBody'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexStatic'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveBody'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveConstraint'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpSpace}^{cpBody}^{cpBody}^{cpConstraint}^{cpConstraint}iiii^?^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveShape'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSegmentQuery'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpVect' name='start' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='end' type='{cpVect=ii}'/>
<arg declared_type='int' name='radius' type='i'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<arg declared_type='cpSpaceSegmentQueryFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSegmentQueryFirst'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpVect' name='start' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='end' type='{cpVect=ii}'/>
<arg declared_type='int' name='radius' type='i'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<arg declared_type='cpSegmentQueryInfo*' name='out' type='^{cpSegmentQueryInfo=^{cpShape}{cpVect=ii}{cpVect=ii}i}'/>
<retval declared_type='struct cpShape*' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceSetCollisionBias'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='collisionBias' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetCollisionPersistence'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='collisionPersistence' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetCollisionSlop'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='collisionSlop' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetDamping'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='damping' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetGravity'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpVect' name='gravity' type='{cpVect=ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetIdleSpeedThreshold'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='idleSpeedThreshold' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetIterations'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='iterations' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetSleepTimeThreshold'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='sleepTimeThreshold' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetStaticBody'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetUserData'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='userData' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceShapeQuery'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='struct cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpSpace}^{cpBody}{cpShapeMassInfo=ii{cpVect=ii}i}{cpBB=iiii}iii{cpVect=ii}iI{cpShapeFilter=III}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpSpaceShapeQueryFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceStep'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='dt' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpaceUncacheArbiter'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ii{cpVect=ii}i^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}{cpVect=ii}^{cpCollisionHandler}^{cpCollisionHandler}^{cpCollisionHandler}iii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceUnlock'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='runPostStep' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceUseSpatialHash'>
<arg declared_type='struct cpSpace*' name='space' type='^{cpSpace=i{cpVect=ii}iiiiiiiii^{cpArray}^{cpArray}^{cpArray}^{cpArray}I^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}Ii^{cpHashSet}{cpCollisionHandler=iiii^?^?i}i^{cpArray}^{cpBody}{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}}'/>
<arg declared_type='int' name='dim' type='i'/>
<arg declared_type='int' name='count' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexCollideStatic'>
<arg declared_type='cpSpatialIndex*' name='dynamicIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexQueryFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpCollisionID' type='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpCollisionID' type='I'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexContains'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='cpHashValue' name='hashid' type='L'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpSpatialIndexCount'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpSpatialIndexDestroy'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexEach'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexFree'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexInit'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexClass*' name='klass' type='^{cpSpatialIndexClass=^?^?^?i^?^?^?^?^?^?^?}'/>
<arg declared_type='cpSpatialIndexBBFunc' function_pointer='true' name='bbfunc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function inline='true' name='cpSpatialIndexInsert'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='cpHashValue' name='hashid' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexQuery'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<arg declared_type='cpSpatialIndexQueryFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpCollisionID' type='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpCollisionID' type='I'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexReindex'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexReindexObject'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='cpHashValue' name='hashid' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexReindexQuery'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexQueryFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpCollisionID' type='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpCollisionID' type='I'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexRemove'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='cpHashValue' name='hashid' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexSegmentQuery'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='struct cpVect' name='a' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='b' type='{cpVect=ii}'/>
<arg declared_type='int' name='t_exit' type='i'/>
<arg declared_type='int' name='func' type='i'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSweep1DAlloc'>
<retval declared_type='cpSweep1D*' type='^{cpSweep1D=}'/>
</function>
<function name='cpSweep1DInit'>
<arg declared_type='cpSweep1D*' name='sweep' type='^{cpSweep1D=}'/>
<arg declared_type='cpSpatialIndexBBFunc' function_pointer='true' name='bbfunc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSweep1DNew'>
<arg declared_type='cpSpatialIndexBBFunc' function_pointer='true' name='bbfunc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function inline='true' name='cpTransformAxialScale'>
<arg declared_type='struct cpVect' name='axis' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='pivot' type='{cpVect=ii}'/>
<arg declared_type='int' name='scale' type='i'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformBoneScale'>
<arg declared_type='struct cpVect' name='v0' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformInverse'>
<arg declared_type='cpTransform' name='t' type='{cpTransform=iiiiii}'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformMult'>
<arg declared_type='cpTransform' name='t1' type='{cpTransform=iiiiii}'/>
<arg declared_type='cpTransform' name='t2' type='{cpTransform=iiiiii}'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformNew'>
<arg declared_type='int' name='a' type='i'/>
<arg declared_type='int' name='b' type='i'/>
<arg declared_type='int' name='c' type='i'/>
<arg declared_type='int' name='d' type='i'/>
<arg declared_type='int' name='tx' type='i'/>
<arg declared_type='int' name='ty' type='i'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformNewTranspose'>
<arg declared_type='int' name='a' type='i'/>
<arg declared_type='int' name='c' type='i'/>
<arg declared_type='int' name='tx' type='i'/>
<arg declared_type='int' name='b' type='i'/>
<arg declared_type='int' name='d' type='i'/>
<arg declared_type='int' name='ty' type='i'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformOrtho'>
<arg declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformPoint'>
<arg declared_type='cpTransform' name='t' type='{cpTransform=iiiiii}'/>
<arg declared_type='struct cpVect' name='p' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpTransformRigid'>
<arg declared_type='struct cpVect' name='translate' type='{cpVect=ii}'/>
<arg declared_type='int' name='radians' type='i'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformRigidInverse'>
<arg declared_type='cpTransform' name='t' type='{cpTransform=iiiiii}'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformRotate'>
<arg declared_type='int' name='radians' type='i'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformScale'>
<arg declared_type='int' name='scaleX' type='i'/>
<arg declared_type='int' name='scaleY' type='i'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformTranslate'>
<arg declared_type='struct cpVect' name='translate' type='{cpVect=ii}'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformVect'>
<arg declared_type='cpTransform' name='t' type='{cpTransform=iiiiii}'/>
<arg declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpTransformWrap'>
<arg declared_type='cpTransform' name='outer' type='{cpTransform=iiiiii}'/>
<arg declared_type='cpTransform' name='inner' type='{cpTransform=iiiiii}'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformWrapInverse'>
<arg declared_type='cpTransform' name='outer' type='{cpTransform=iiiiii}'/>
<arg declared_type='cpTransform' name='inner' type='{cpTransform=iiiiii}'/>
<retval declared_type='cpTransform' type='{cpTransform=iiiiii}'/>
</function>
<function inline='true' name='cpTransformbBB'>
<arg declared_type='cpTransform' name='t' type='{cpTransform=iiiiii}'/>
<arg declared_type='cpBB' name='bb' type='{cpBB=iiii}'/>
<retval declared_type='cpBB' type='{cpBB=iiii}'/>
</function>
<function inline='true' name='cpfabs'>
<arg declared_type='int' name='f' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpfclamp'>
<arg declared_type='int' name='f' type='i'/>
<arg declared_type='int' name='min' type='i'/>
<arg declared_type='int' name='max' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpfclamp01'>
<arg declared_type='int' name='f' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpflerp'>
<arg declared_type='int' name='f1' type='i'/>
<arg declared_type='int' name='f2' type='i'/>
<arg declared_type='int' name='t' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpflerpconst'>
<arg declared_type='int' name='f1' type='i'/>
<arg declared_type='int' name='f2' type='i'/>
<arg declared_type='int' name='d' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpfmax'>
<arg declared_type='int' name='a' type='i'/>
<arg declared_type='int' name='b' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpfmin'>
<arg declared_type='int' name='a' type='i'/>
<arg declared_type='int' name='b' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpv'>
<arg const='true' declared_type='int' name='x' type='i'/>
<arg const='true' declared_type='int' name='y' type='i'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvadd'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvclamp'>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<arg const='true' declared_type='int' name='len' type='i'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvcross'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpvdist'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpvdistsq'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpvdot'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpveql'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpvforangle'>
<arg const='true' declared_type='int' name='a' type='i'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvlength'>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpvlengthsq'>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpvlerp'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<arg const='true' declared_type='int' name='t' type='i'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvlerpconst'>
<arg declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<arg declared_type='int' name='d' type='i'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvmult'>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<arg const='true' declared_type='int' name='s' type='i'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvnear'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<arg const='true' declared_type='int' name='dist' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpvneg'>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvnormalize'>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvperp'>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvproject'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvrotate'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvrperp'>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvslerp'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<arg const='true' declared_type='int' name='t' type='i'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvslerpconst'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<arg const='true' declared_type='int' name='a' type='i'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvsub'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='cpvtoangle'>
<arg const='true' declared_type='struct cpVect' name='v' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpvunrotate'>
<arg const='true' declared_type='struct cpVect' name='v1' type='{cpVect=ii}'/>
<arg const='true' declared_type='struct cpVect' name='v2' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function inline='true' name='k_scalar'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='r1' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='r2' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='n' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='k_scalar_body'>
<arg declared_type='struct cpBody*' name='body' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='r' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='n' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='k_tensor'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='r1' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='r2' type='{cpVect=ii}'/>
<retval declared_type='cpMat2x2' type='{cpMat2x2=iiii}'/>
</function>
<function inline='true' name='normal_relative_velocity'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='r1' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='r2' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='n' type='{cpVect=ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='relative_velocity'>
<arg declared_type='struct cpBody*' name='a' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpBody*' name='b' type='^{cpBody=^?^?iiii{cpVect=ii}{cpVect=ii}{cpVect=ii}{cpVect=ii}iii{cpTransform=iiiiii}i{cpVect=ii}i^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{?=^{cpBody}^{cpBody}i}}'/>
<arg declared_type='struct cpVect' name='r1' type='{cpVect=ii}'/>
<arg declared_type='struct cpVect' name='r2' type='{cpVect=ii}'/>
<retval declared_type='struct cpVect' type='{cpVect=ii}'/>
</function>
<function_alias name='cpcalloc' original='calloc'/>
<function_alias name='cpfacos' original='acosf'/>
<function_alias name='cpfatan2' original='atan2f'/>
<function_alias name='cpfceil' original='ceilf'/>
<function_alias name='cpfcos' original='cosf'/>
<function_alias name='cpfexp' original='expf'/>
<function_alias name='cpffloor' original='floorf'/>
<function_alias name='cpfmod' original='fmodf'/>
<function_alias name='cpfpow' original='powf'/>
<function_alias name='cpfree' original='free'/>
<function_alias name='cpfsin' original='sinf'/>
<function_alias name='cpfsqrt' original='sqrtf'/>
<function_alias name='cprealloc' original='realloc'/>
</signatures>
