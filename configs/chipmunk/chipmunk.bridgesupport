<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='cpBB' type='{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}'>
<field declared_type='cpFloat' name='l' type='f'/>
<field declared_type='cpFloat' name='b' type='f'/>
<field declared_type='cpFloat' name='r' type='f'/>
<field declared_type='cpFloat' name='t' type='f'/>
</struct>
<struct name='cpCollisionHandler' type='{cpCollisionHandler=&quot;typeA&quot;I&quot;typeB&quot;I&quot;beginFunc&quot;^?&quot;preSolveFunc&quot;^?&quot;postSolveFunc&quot;^?&quot;separateFunc&quot;^?&quot;userData&quot;^v}'>
<field const='true' declared_type='cpCollisionType' name='typeA' type='L'/>
<field const='true' declared_type='cpCollisionType' name='typeB' type='L'/>
<field declared_type='cpCollisionBeginFunc' function_pointer='true' name='beginFunc' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=}'/>
<arg declared_type='cpDataPointer' type='^v'/>
<retval declared_type='cpBool' type='C'/>
</field>
<field declared_type='cpCollisionPreSolveFunc' function_pointer='true' name='preSolveFunc' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=}'/>
<arg declared_type='cpDataPointer' type='^v'/>
<retval declared_type='cpBool' type='C'/>
</field>
<field declared_type='cpCollisionPostSolveFunc' function_pointer='true' name='postSolveFunc' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=}'/>
<arg declared_type='cpDataPointer' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpCollisionSeparateFunc' function_pointer='true' name='separateFunc' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=}'/>
<arg declared_type='cpDataPointer' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpDataPointer' name='userData' type='^v'/>
</struct>
<struct name='cpContactPointSet' type='{cpContactPointSet=&quot;count&quot;i&quot;normal&quot;{cpVect=&quot;x&quot;f&quot;y&quot;f}&quot;points&quot;[2{?=&quot;pointA&quot;{cpVect=&quot;x&quot;f&quot;y&quot;f}&quot;pointB&quot;{cpVect=&quot;x&quot;f&quot;y&quot;f}&quot;distance&quot;f}]}'>
<field declared_type='int' name='count' type='i'/>
<field declared_type='cpVect' name='normal' type='{cpVect=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='struct cpContactPointSet::*' name='points' type='[2{?=&quot;pointA&quot;{cpVect=&quot;x&quot;f&quot;y&quot;f}&quot;pointB&quot;{cpVect=&quot;x&quot;f&quot;y&quot;f}&quot;distance&quot;f}]'/>
</struct>
<struct name='cpMat2x2' type='{cpMat2x2=&quot;a&quot;f&quot;b&quot;f&quot;c&quot;f&quot;d&quot;f}'>
<field declared_type='cpFloat' name='a' type='f'/>
<field declared_type='cpFloat' name='b' type='f'/>
<field declared_type='cpFloat' name='c' type='f'/>
<field declared_type='cpFloat' name='d' type='f'/>
</struct>
<struct name='cpPointQueryInfo' type='{cpPointQueryInfo=&quot;shape&quot;^{cpShape}&quot;point&quot;{cpVect=&quot;x&quot;f&quot;y&quot;f}&quot;distance&quot;f&quot;gradient&quot;{cpVect=&quot;x&quot;f&quot;y&quot;f}}'>
<field const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<field declared_type='cpVect' name='point' type='{cpVect=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='distance' type='f'/>
<field declared_type='cpVect' name='gradient' type='{cpVect=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpPolyline' type='{cpPolyline=&quot;count&quot;i&quot;capacity&quot;i&quot;verts&quot;^{cpVect=&quot;x&quot;f&quot;y&quot;f}}'>
<field declared_type='int' name='count' type='i'/>
<field declared_type='int' name='capacity' type='i'/>
<field declared_type='cpVect*' name='verts' type='^{cpVect=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpPolylineSet' type='{cpPolylineSet=&quot;count&quot;i&quot;capacity&quot;i&quot;lines&quot;^^{cpPolyline}}'>
<field declared_type='int' name='count' type='i'/>
<field declared_type='int' name='capacity' type='i'/>
<field declared_type='cpPolyline**' name='lines' type='^^{cpPolyline}'/>
</struct>
<struct name='cpSegmentQueryInfo' type='{cpSegmentQueryInfo=&quot;shape&quot;^{cpShape}&quot;point&quot;{cpVect=&quot;x&quot;f&quot;y&quot;f}&quot;normal&quot;{cpVect=&quot;x&quot;f&quot;y&quot;f}&quot;alpha&quot;f}'>
<field const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<field declared_type='cpVect' name='point' type='{cpVect=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='normal' type='{cpVect=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='alpha' type='f'/>
</struct>
<struct name='cpShapeFilter' type='{cpShapeFilter=&quot;group&quot;I&quot;categories&quot;I&quot;mask&quot;I}'>
<field declared_type='cpGroup' name='group' type='L'/>
<field declared_type='cpBitmask' name='categories' type='I'/>
<field declared_type='cpBitmask' name='mask' type='I'/>
</struct>
<struct name='cpSpaceDebugColor' type='{cpSpaceDebugColor=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'>
<field declared_type='float' name='r' type='f'/>
<field declared_type='float' name='g' type='f'/>
<field declared_type='float' name='b' type='f'/>
<field declared_type='float' name='a' type='f'/>
</struct>
<struct name='cpSpaceDebugDrawOptions' type='{cpSpaceDebugDrawOptions=&quot;drawCircle&quot;^?&quot;drawSegment&quot;^?&quot;drawFatSegment&quot;^?&quot;drawPolygon&quot;^?&quot;drawDot&quot;^?&quot;flags&quot;i&quot;shapeOutlineColor&quot;{cpSpaceDebugColor=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;colorForShape&quot;^?&quot;constraintColor&quot;{cpSpaceDebugColor=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;collisionPointColor&quot;{cpSpaceDebugColor=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;data&quot;^v}'>
<field declared_type='cpSpaceDebugDrawCircleImpl' function_pointer='true' name='drawCircle' type='^?'>
<arg declared_type='cpVect' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpSpaceDebugColor' type='{cpSpaceDebugColor=ffff}'/>
<arg declared_type='cpSpaceDebugColor' type='{cpSpaceDebugColor=ffff}'/>
<arg declared_type='cpDataPointer' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpaceDebugDrawSegmentImpl' function_pointer='true' name='drawSegment' type='^?'>
<arg declared_type='cpVect' type='{cpVect=ff}'/>
<arg declared_type='cpVect' type='{cpVect=ff}'/>
<arg declared_type='cpSpaceDebugColor' type='{cpSpaceDebugColor=ffff}'/>
<arg declared_type='cpDataPointer' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpaceDebugDrawFatSegmentImpl' function_pointer='true' name='drawFatSegment' type='^?'>
<arg declared_type='cpVect' type='{cpVect=ff}'/>
<arg declared_type='cpVect' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpSpaceDebugColor' type='{cpSpaceDebugColor=ffff}'/>
<arg declared_type='cpSpaceDebugColor' type='{cpSpaceDebugColor=ffff}'/>
<arg declared_type='cpDataPointer' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpaceDebugDrawPolygonImpl' function_pointer='true' name='drawPolygon' type='^?'>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='cpVect*' type='^{cpVect=ff}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpSpaceDebugColor' type='{cpSpaceDebugColor=ffff}'/>
<arg declared_type='cpSpaceDebugColor' type='{cpSpaceDebugColor=ffff}'/>
<arg declared_type='cpDataPointer' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpaceDebugDrawDotImpl' function_pointer='true' name='drawDot' type='^?'>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpVect' type='{cpVect=ff}'/>
<arg declared_type='cpSpaceDebugColor' type='{cpSpaceDebugColor=ffff}'/>
<arg declared_type='cpDataPointer' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpaceDebugDrawFlags' name='flags' type='i'/>
<field declared_type='cpSpaceDebugColor' name='shapeOutlineColor' type='{cpSpaceDebugColor=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'/>
<field declared_type='cpSpaceDebugDrawColorForShapeImpl' function_pointer='true' name='colorForShape' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=}'/>
<arg declared_type='cpDataPointer' type='^v'/>
<retval declared_type='cpSpaceDebugColor' type='{cpSpaceDebugColor=ffff}'/>
</field>
<field declared_type='cpSpaceDebugColor' name='constraintColor' type='{cpSpaceDebugColor=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'/>
<field declared_type='cpSpaceDebugColor' name='collisionPointColor' type='{cpSpaceDebugColor=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'/>
<field declared_type='cpDataPointer' name='data' type='^v'/>
</struct>
<struct name='cpTransform' type='{cpTransform=&quot;a&quot;f&quot;b&quot;f&quot;c&quot;f&quot;d&quot;f&quot;tx&quot;f&quot;ty&quot;f}'>
<field declared_type='cpFloat' name='a' type='f'/>
<field declared_type='cpFloat' name='b' type='f'/>
<field declared_type='cpFloat' name='c' type='f'/>
<field declared_type='cpFloat' name='d' type='f'/>
<field declared_type='cpFloat' name='tx' type='f'/>
<field declared_type='cpFloat' name='ty' type='f'/>
</struct>
<struct name='cpVect' type='{cpVect=&quot;x&quot;f&quot;y&quot;f}'>
<field declared_type='cpFloat' name='x' type='f'/>
<field declared_type='cpFloat' name='y' type='f'/>
</struct>
<opaque name='cpArbiter' type='^{cpArbiter=}'/>
<opaque name='cpArray' type='^{cpArray=}'/>
<opaque name='cpBody' type='^{cpBody=}'/>
<opaque name='cpCircleShape' type='^{cpCircleShape=}'/>
<opaque name='cpConstraint' type='^{cpConstraint=}'/>
<opaque name='cpDampedRotarySpring' type='^{cpDampedRotarySpring=}'/>
<opaque name='cpDampedSpring' type='^{cpDampedSpring=}'/>
<opaque name='cpGearJoint' type='^{cpGearJoint=}'/>
<opaque name='cpGrooveJoint' type='^{cpGrooveJoint=}'/>
<opaque name='cpHashSet' type='^{cpHashSet=}'/>
<opaque name='cpPinJoint' type='^{cpPinJoint=}'/>
<opaque name='cpPivotJoint' type='^{cpPivotJoint=}'/>
<opaque name='cpPolyShape' type='^{cpPolyShape=}'/>
<opaque name='cpRatchetJoint' type='^{cpRatchetJoint=}'/>
<opaque name='cpRotaryLimitJoint' type='^{cpRotaryLimitJoint=}'/>
<opaque name='cpSegmentShape' type='^{cpSegmentShape=}'/>
<opaque name='cpShape' type='^{cpShape=}'/>
<opaque name='cpSimpleMotor' type='^{cpSimpleMotor=}'/>
<opaque name='cpSimpleMotorJoint' type='^{cpSimpleMotorJoint=}'/>
<opaque name='cpSlideJoint' type='^{cpSlideJoint=}'/>
<opaque name='cpSpace' type='^{cpSpace=}'/>
<constant const='true' declared_type='cpShapeFilter' name='CP_SHAPE_FILTER_ALL' type='{cpShapeFilter=III}'/>
<constant const='true' declared_type='cpShapeFilter' name='CP_SHAPE_FILTER_NONE' type='{cpShapeFilter=III}'/>
<constant const='true' declared_type='cpTransform' name='cpTransformIdentity' type='{cpTransform=ffffff}'/>
<constant const='true' declared_type='char*' name='cpVersionString' type='*'/>
<constant const='true' declared_type='cpVect' name='cpvzero' type='{cpVect=ff}'/>
<enum name='CPFLOAT_MIN' value='1.1754944E-38'/>
<enum name='CP_ALL_CATEGORIES' value='4294967295'/>
<enum name='CP_BODY_TYPE_DYNAMIC' value='0'/>
<enum name='CP_BODY_TYPE_KINEMATIC' value='1'/>
<enum name='CP_BODY_TYPE_STATIC' value='2'/>
<enum name='CP_BUFFER_BYTES' value='32768'/>
<enum name='CP_MAX_CONTACTS_PER_ARBITER' value='2'/>
<enum name='CP_NO_GROUP' value='0'/>
<enum name='CP_PI' value='3.1415927'/>
<enum name='CP_SPACE_DEBUG_DRAW_COLLISION_POINTS' value='4'/>
<enum name='CP_SPACE_DEBUG_DRAW_CONSTRAINTS' value='2'/>
<enum name='CP_SPACE_DEBUG_DRAW_SHAPES' value='1'/>
<enum name='CP_USE_DOUBLES' value='0'/>
<enum name='CP_VERSION_MAJOR' value='7'/>
<enum name='CP_VERSION_MINOR' value='0'/>
<enum name='CP_VERSION_RELEASE' value='1'/>
<enum name='CP_WILDCARD_COLLISION_TYPE' value='4294967295'/>
<enum name='cpFalse' value='0'/>
<enum name='cpTrue' value='1'/>
<function name='cpArbiterCallWildcardBeginA'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpArbiterCallWildcardBeginB'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpArbiterCallWildcardPostSolveA'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterCallWildcardPostSolveB'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterCallWildcardPreSolveA'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpArbiterCallWildcardPreSolveB'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpArbiterCallWildcardSeparateA'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterCallWildcardSeparateB'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetBodies'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpBody**' name='a' type='^^{cpBody}'/>
<arg declared_type='cpBody**' name='b' type='^^{cpBody}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetContactPointSet'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='cpContactPointSet' type='{cpContactPointSet=i{cpVect=ff}[2{?={cpVect=ff}{cpVect=ff}f}]}'/>
</function>
<function name='cpArbiterGetCount'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterGetDepth'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='int' name='i' type='i'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArbiterGetFriction'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArbiterGetNormal'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpArbiterGetPointA'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='int' name='i' type='i'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpArbiterGetPointB'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='int' name='i' type='i'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpArbiterGetRestitution'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArbiterGetShapes'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpShape**' name='a' type='^^{cpShape}'/>
<arg declared_type='cpShape**' name='b' type='^^{cpShape}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetSurfaceVelocity'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpArbiterGetUserData'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpArbiterIgnore'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpArbiterIsFirstContact'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpArbiterIsRemoval'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpArbiterSetContactPointSet'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpContactPointSet*' name='set' type='^{cpContactPointSet=i{cpVect=ff}[2{?={cpVect=ff}{cpVect=ff}f}]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetFriction'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpFloat' name='friction' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetRestitution'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpFloat' name='restitution' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetSurfaceVelocity'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpVect' name='vr' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetUserData'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<arg declared_type='cpDataPointer' name='userData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterTotalImpulse'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpArbiterTotalKE'>
<arg const='true' declared_type='cpArbiter*' name='arb' type='^{cpArbiter=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpAreaForCircle'>
<arg declared_type='cpFloat' name='r1' type='f'/>
<arg declared_type='cpFloat' name='r2' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpAreaForPoly'>
<arg const='true' declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='cpVect*' name='verts' type='^{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpAreaForSegment'>
<arg declared_type='cpVect' name='a' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='b' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpBBArea'>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpBBCenter'>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpBBClampVect'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpBBContainsBB'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg const='true' declared_type='cpBB' name='other' type='{cpBB=ffff}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function inline='true' name='cpBBContainsVect'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function inline='true' name='cpBBExpand'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function inline='true' name='cpBBIntersects'>
<arg const='true' declared_type='cpBB' name='a' type='{cpBB=ffff}'/>
<arg const='true' declared_type='cpBB' name='b' type='{cpBB=ffff}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function inline='true' name='cpBBIntersectsSegment'>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg declared_type='cpVect' name='a' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='b' type='{cpVect=ff}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function inline='true' name='cpBBMerge'>
<arg const='true' declared_type='cpBB' name='a' type='{cpBB=ffff}'/>
<arg const='true' declared_type='cpBB' name='b' type='{cpBB=ffff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function inline='true' name='cpBBMergedArea'>
<arg declared_type='cpBB' name='a' type='{cpBB=ffff}'/>
<arg declared_type='cpBB' name='b' type='{cpBB=ffff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpBBNew'>
<arg const='true' declared_type='cpFloat' name='l' type='f'/>
<arg const='true' declared_type='cpFloat' name='b' type='f'/>
<arg const='true' declared_type='cpFloat' name='r' type='f'/>
<arg const='true' declared_type='cpFloat' name='t' type='f'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function inline='true' name='cpBBNewForCircle'>
<arg const='true' declared_type='cpVect' name='p' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpFloat' name='r' type='f'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function inline='true' name='cpBBNewForExtents'>
<arg const='true' declared_type='cpVect' name='c' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpFloat' name='hw' type='f'/>
<arg const='true' declared_type='cpFloat' name='hh' type='f'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function inline='true' name='cpBBOffset'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function inline='true' name='cpBBSegmentQuery'>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg declared_type='cpVect' name='a' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='b' type='{cpVect=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpBBWrapVect'>
<arg const='true' declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyActivate'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyActivateStatic'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpShape*' name='filter' type='^{cpShape=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyAlloc'>
<retval declared_type='cpBody*' type='^{cpBody=}'/>
</function>
<function name='cpBodyApplyForceAtLocalPoint'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='force' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyApplyForceAtWorldPoint'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='force' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyApplyImpulse'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg const='true' declared_type='cpVect' name='j' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='r' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyApplyImpulseAtLocalPoint'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='impulse' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyApplyImpulseAtWorldPoint'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='impulse' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyDestroy'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachArbiter'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpBodyArbiterIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=}'/>
<arg declared_type='cpArbiter*' type='^{cpArbiter=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachConstraint'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpBodyConstraintIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=}'/>
<arg declared_type='cpConstraint*' type='^{cpConstraint=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachShape'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpBodyShapeIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=}'/>
<arg declared_type='cpShape*' type='^{cpShape=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyFree'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyGetAngVel'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetAngle'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetAngularVelocity'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetCenterOfGravity'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyGetForce'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyGetMass'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetMoment'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetPos'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyGetPosition'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyGetRot'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyGetRotation'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyGetSpace'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=}'/>
</function>
<function name='cpBodyGetTorque'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetType'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpBodyType' type='i'/>
</function>
<function name='cpBodyGetUserData'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpBodyGetVel'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyGetVelocity'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyGetVelocityAtLocalPoint'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyGetVelocityAtWorldPoint'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyInit'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='mass' type='f'/>
<arg declared_type='cpFloat' name='moment' type='f'/>
<retval declared_type='cpBody*' type='^{cpBody=}'/>
</function>
<function name='cpBodyIsSleeping'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpBodyKineticEnergy'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyLocal2World'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg const='true' declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyLocalToWorld'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg const='true' declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyNew'>
<arg declared_type='cpFloat' name='mass' type='f'/>
<arg declared_type='cpFloat' name='moment' type='f'/>
<retval declared_type='cpBody*' type='^{cpBody=}'/>
</function>
<function name='cpBodyNewKinematic'>
<retval declared_type='cpBody*' type='^{cpBody=}'/>
</function>
<function name='cpBodyNewStatic'>
<retval declared_type='cpBody*' type='^{cpBody=}'/>
</function>
<function name='cpBodySetAngVel'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='angularVelocity' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetAngle'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='a' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetAngularVelocity'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='angularVelocity' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetCenterOfGravity'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='cog' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetForce'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='force' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetMass'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='m' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetMoment'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='i' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetPos'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='pos' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetPosition'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='pos' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetPositionUpdateFunc'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpBodyPositionFunc' function_pointer='true' name='positionFunc' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetTorque'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='torque' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetType'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpBodyType' name='type' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetUserData'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpDataPointer' name='userData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetVel'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='velocity' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetVelocity'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='velocity' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetVelocityUpdateFunc'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpBodyVelocityFunc' function_pointer='true' name='velocityFunc' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=}'/>
<arg declared_type='cpVect' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySleep'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySleepWithGroup'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='group' type='^{cpBody=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyUpdatePosition'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='dt' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyUpdateVelocity'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='gravity' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<arg declared_type='cpFloat' name='dt' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyWorld2Local'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg const='true' declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBodyWorldToLocal'>
<arg const='true' declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg const='true' declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpBoxShapeInit'>
<arg declared_type='cpPolyShape*' name='poly' type='^{cpPolyShape=}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='width' type='f'/>
<arg declared_type='cpFloat' name='height' type='f'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape=}'/>
</function>
<function name='cpBoxShapeInit2'>
<arg declared_type='cpPolyShape*' name='poly' type='^{cpPolyShape=}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpBB' name='box' type='{cpBB=ffff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape=}'/>
</function>
<function name='cpBoxShapeNew'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='width' type='f'/>
<arg declared_type='cpFloat' name='height' type='f'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpShape*' type='^{cpShape=}'/>
</function>
<function name='cpBoxShapeNew2'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpBB' name='box' type='{cpBB=ffff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpShape*' type='^{cpShape=}'/>
</function>
<function name='cpCentroidForPoly'>
<arg const='true' declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='cpVect*' name='verts' type='^{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpCheckSignedArea'>
<arg const='true' declared_type='cpVect' name='a' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='b' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='c' type='{cpVect=ff}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpCircleShapeAlloc'>
<retval declared_type='cpCircleShape*' type='^{cpCircleShape=}'/>
</function>
<function name='cpCircleShapeGetOffset'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpCircleShapeGetRadius'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpCircleShapeInit'>
<arg declared_type='cpCircleShape*' name='circle' type='^{cpCircleShape=}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<arg declared_type='cpVect' name='offset' type='{cpVect=ff}'/>
<retval declared_type='cpCircleShape*' type='^{cpCircleShape=}'/>
</function>
<function name='cpCircleShapeNew'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<arg declared_type='cpVect' name='offset' type='{cpVect=ff}'/>
<retval declared_type='cpShape*' type='^{cpShape=}'/>
</function>
<function inline='true' name='cpClosetPointOnSegment'>
<arg const='true' declared_type='cpVect' name='p' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='a' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='b' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpConstraintDestroy'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintFree'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintGetBodyA'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBody*' type='^{cpBody=}'/>
</function>
<function name='cpConstraintGetBodyB'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBody*' type='^{cpBody=}'/>
</function>
<function name='cpConstraintGetCollideBodies'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpConstraintGetErrorBias'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpConstraintGetImpulse'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpConstraintGetMaxBias'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpConstraintGetMaxForce'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpConstraintGetPostSolveFunc'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpConstraintPostSolveFunc' function_pointer='true' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='cpConstraintGetPreSolveFunc'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpConstraintPreSolveFunc' function_pointer='true' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='cpConstraintGetSpace'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=}'/>
</function>
<function name='cpConstraintGetUserData'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpConstraintIsDampedRotarySpring'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpConstraintIsDampedSpring'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpConstraintIsGearJoint'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpConstraintIsGrooveJoint'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpConstraintIsPinJoint'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpConstraintIsPivotJoint'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpConstraintIsRatchetJoint'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpConstraintIsRotaryLimitJoint'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpConstraintIsSimpleMotor'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpConstraintIsSlideJoint'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpConstraintSetCollideBodies'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpBool' name='collideBodies' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetErrorBias'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='errorBias' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetMaxBias'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='maxBias' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetMaxForce'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='maxForce' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetPostSolveFunc'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpConstraintPostSolveFunc' function_pointer='true' name='postSolveFunc' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetPreSolveFunc'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpConstraintPreSolveFunc' function_pointer='true' name='preSolveFunc' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetUserData'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpDataPointer' name='userData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConvexHull'>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='cpVect*' name='verts' type='^{cpVect=ff}'/>
<arg declared_type='cpVect*' name='result' type='^{cpVect=ff}'/>
<arg declared_type='int*' name='first' type='^i'/>
<arg declared_type='cpFloat' name='tol' type='f'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedRotarySpringAlloc'>
<retval declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring=}'/>
</function>
<function name='cpDampedRotarySpringGetDamping'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedRotarySpringGetRestAngle'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedRotarySpringGetSpringTorqueFunc'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpDampedRotarySpringTorqueFunc' function_pointer='true' type='^?'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</retval>
</function>
<function name='cpDampedRotarySpringGetStiffness'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedRotarySpringInit'>
<arg declared_type='cpDampedRotarySpring*' name='joint' type='^{cpDampedRotarySpring=}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='restAngle' type='f'/>
<arg declared_type='cpFloat' name='stiffness' type='f'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<retval declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring=}'/>
</function>
<function name='cpDampedRotarySpringNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='restAngle' type='f'/>
<arg declared_type='cpFloat' name='stiffness' type='f'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpDampedRotarySpringSetDamping'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetRestAngle'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='restAngle' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetSpringTorqueFunc'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpDampedRotarySpringTorqueFunc' function_pointer='true' name='springTorqueFunc' type='^?'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetStiffness'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='stiffness' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringAlloc'>
<retval declared_type='cpDampedSpring*' type='^{cpDampedSpring=}'/>
</function>
<function name='cpDampedSpringGetAnchorA'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpDampedSpringGetAnchorB'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpDampedSpringGetDamping'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedSpringGetRestLength'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedSpringGetSpringForceFunc'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpDampedSpringForceFunc' function_pointer='true' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</retval>
</function>
<function name='cpDampedSpringGetStiffness'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedSpringInit'>
<arg declared_type='cpDampedSpring*' name='joint' type='^{cpDampedSpring=}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='restLength' type='f'/>
<arg declared_type='cpFloat' name='stiffness' type='f'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<retval declared_type='cpDampedSpring*' type='^{cpDampedSpring=}'/>
</function>
<function name='cpDampedSpringNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='restLength' type='f'/>
<arg declared_type='cpFloat' name='stiffness' type='f'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpDampedSpringSetAnchorA'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetAnchorB'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetDamping'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetRestLength'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='restLength' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetSpringForceFunc'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpDampedSpringForceFunc' function_pointer='true' name='springForceFunc' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetStiffness'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='stiffness' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGearJointAlloc'>
<retval declared_type='cpGearJoint*' type='^{cpGearJoint=}'/>
</function>
<function name='cpGearJointGetPhase'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpGearJointGetRatio'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpGearJointInit'>
<arg declared_type='cpGearJoint*' name='joint' type='^{cpGearJoint=}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='phase' type='f'/>
<arg declared_type='cpFloat' name='ratio' type='f'/>
<retval declared_type='cpGearJoint*' type='^{cpGearJoint=}'/>
</function>
<function name='cpGearJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='phase' type='f'/>
<arg declared_type='cpFloat' name='ratio' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpGearJointSetPhase'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='phase' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGearJointSetRatio'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='ratio' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointAlloc'>
<retval declared_type='cpGrooveJoint*' type='^{cpGrooveJoint=}'/>
</function>
<function name='cpGrooveJointGetAnchorB'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpGrooveJointGetGrooveA'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpGrooveJointGetGrooveB'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpGrooveJointInit'>
<arg declared_type='cpGrooveJoint*' name='joint' type='^{cpGrooveJoint=}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='groove_a' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='groove_b' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<retval declared_type='cpGrooveJoint*' type='^{cpGrooveJoint=}'/>
</function>
<function name='cpGrooveJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='groove_a' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='groove_b' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpGrooveJointSetAnchorB'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointSetGrooveA'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpVect' name='grooveA' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointSetGrooveB'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpVect' name='grooveB' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpMat2x2New'>
<arg declared_type='cpFloat' name='a' type='f'/>
<arg declared_type='cpFloat' name='b' type='f'/>
<arg declared_type='cpFloat' name='c' type='f'/>
<arg declared_type='cpFloat' name='d' type='f'/>
<retval declared_type='cpMat2x2' type='{cpMat2x2=ffff}'/>
</function>
<function inline='true' name='cpMat2x2Transform'>
<arg declared_type='cpMat2x2' name='m' type='{cpMat2x2=ffff}'/>
<arg declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpMessage' variadic='true'>
<arg const='true' declared_type='char*' name='condition' type='*'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<arg declared_type='int' name='isError' type='i'/>
<arg declared_type='int' name='isHardError' type='i'/>
<arg const='true' declared_type='char*' name='message' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpMomentForBox'>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='cpFloat' name='width' type='f'/>
<arg declared_type='cpFloat' name='height' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForBox2'>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='cpBB' name='box' type='{cpBB=ffff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForCircle'>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='cpFloat' name='r1' type='f'/>
<arg declared_type='cpFloat' name='r2' type='f'/>
<arg declared_type='cpVect' name='offset' type='{cpVect=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForPoly'>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='cpVect*' name='verts' type='^{cpVect=ff}'/>
<arg declared_type='cpVect' name='offset' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForSegment'>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='cpVect' name='a' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='b' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpPinJointAlloc'>
<retval declared_type='cpPinJoint*' type='^{cpPinJoint=}'/>
</function>
<function name='cpPinJointGetAnchorA'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpPinJointGetAnchorB'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpPinJointGetDist'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpPinJointInit'>
<arg declared_type='cpPinJoint*' name='joint' type='^{cpPinJoint=}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<retval declared_type='cpPinJoint*' type='^{cpPinJoint=}'/>
</function>
<function name='cpPinJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpPinJointSetAnchorA'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPinJointSetAnchorB'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPinJointSetDist'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='dist' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPivotJointAlloc'>
<retval declared_type='cpPivotJoint*' type='^{cpPivotJoint=}'/>
</function>
<function name='cpPivotJointGetAnchorA'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpPivotJointGetAnchorB'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpPivotJointInit'>
<arg declared_type='cpPivotJoint*' name='joint' type='^{cpPivotJoint=}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<retval declared_type='cpPivotJoint*' type='^{cpPivotJoint=}'/>
</function>
<function name='cpPivotJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='pivot' type='{cpVect=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpPivotJointNew2'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpPivotJointSetAnchorA'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPivotJointSetAnchorB'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolyShapeAlloc'>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape=}'/>
</function>
<function name='cpPolyShapeGetCount'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpPolyShapeGetRadius'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpPolyShapeGetVert'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpPolyShapeInit'>
<arg declared_type='cpPolyShape*' name='poly' type='^{cpPolyShape=}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='cpVect*' name='verts' type='^{cpVect=ff}'/>
<arg declared_type='cpTransform' name='transform' type='{cpTransform=ffffff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape=}'/>
</function>
<function name='cpPolyShapeInitRaw'>
<arg declared_type='cpPolyShape*' name='poly' type='^{cpPolyShape=}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='cpVect*' name='verts' type='^{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape=}'/>
</function>
<function name='cpPolyShapeNew'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='cpVect*' name='verts' type='^{cpVect=ff}'/>
<arg declared_type='cpTransform' name='transform' type='{cpTransform=ffffff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpShape*' type='^{cpShape=}'/>
</function>
<function name='cpPolyShapeNewRaw'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='cpVect*' name='verts' type='^{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpShape*' type='^{cpShape=}'/>
</function>
<function name='cpPolyShapeNumVerts'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpPolylineConvexDecomposition'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=ii^{cpVect=ff}}'/>
<arg declared_type='cpFloat' name='tol' type='f'/>
<retval declared_type='cpPolylineSet*' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
</function>
<function name='cpPolylineFree'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=ii^{cpVect=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolylineIsClosed'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=ii^{cpVect=ff}}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpPolylineSetAlloc'>
<retval declared_type='cpPolylineSet*' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
</function>
<function name='cpPolylineSetCollectSegment'>
<arg declared_type='cpVect' name='v0' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg declared_type='cpPolylineSet*' name='lines' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolylineSetDestroy'>
<arg declared_type='cpPolylineSet*' name='set' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
<arg declared_type='cpBool' name='freePolylines' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolylineSetFree'>
<arg declared_type='cpPolylineSet*' name='set' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
<arg declared_type='cpBool' name='freePolylines' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolylineSetInit'>
<arg declared_type='cpPolylineSet*' name='set' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
<retval declared_type='cpPolylineSet*' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
</function>
<function name='cpPolylineSetNew'>
<retval declared_type='cpPolylineSet*' type='^{cpPolylineSet=ii^^{cpPolyline}}'/>
</function>
<function name='cpPolylineSimplifyCurves'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=ii^{cpVect=ff}}'/>
<arg declared_type='cpFloat' name='tol' type='f'/>
<retval declared_type='cpPolyline*' type='^{cpPolyline=ii^{cpVect=ff}}'/>
</function>
<function name='cpPolylineSimplifyVertexes'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=ii^{cpVect=ff}}'/>
<arg declared_type='cpFloat' name='tol' type='f'/>
<retval declared_type='cpPolyline*' type='^{cpPolyline=ii^{cpVect=ff}}'/>
</function>
<function name='cpPolylineToConvexHull'>
<arg declared_type='cpPolyline*' name='line' type='^{cpPolyline=ii^{cpVect=ff}}'/>
<arg declared_type='cpFloat' name='tol' type='f'/>
<retval declared_type='cpPolyline*' type='^{cpPolyline=ii^{cpVect=ff}}'/>
</function>
<function name='cpRatchetJointAlloc'>
<retval declared_type='cpRatchetJoint*' type='^{cpRatchetJoint=}'/>
</function>
<function name='cpRatchetJointGetAngle'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpRatchetJointGetPhase'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpRatchetJointGetRatchet'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpRatchetJointInit'>
<arg declared_type='cpRatchetJoint*' name='joint' type='^{cpRatchetJoint=}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='phase' type='f'/>
<arg declared_type='cpFloat' name='ratchet' type='f'/>
<retval declared_type='cpRatchetJoint*' type='^{cpRatchetJoint=}'/>
</function>
<function name='cpRatchetJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='phase' type='f'/>
<arg declared_type='cpFloat' name='ratchet' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpRatchetJointSetAngle'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='angle' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRatchetJointSetPhase'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='phase' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRatchetJointSetRatchet'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='ratchet' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRotaryLimitJointAlloc'>
<retval declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint=}'/>
</function>
<function name='cpRotaryLimitJointGetMax'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpRotaryLimitJointGetMin'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpRotaryLimitJointInit'>
<arg declared_type='cpRotaryLimitJoint*' name='joint' type='^{cpRotaryLimitJoint=}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint=}'/>
</function>
<function name='cpRotaryLimitJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpRotaryLimitJointSetMax'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRotaryLimitJointSetMin'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentShapeAlloc'>
<retval declared_type='cpSegmentShape*' type='^{cpSegmentShape=}'/>
</function>
<function name='cpSegmentShapeGetA'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpSegmentShapeGetB'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpSegmentShapeGetNormal'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpSegmentShapeGetRadius'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSegmentShapeInit'>
<arg declared_type='cpSegmentShape*' name='seg' type='^{cpSegmentShape=}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='a' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='b' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpSegmentShape*' type='^{cpSegmentShape=}'/>
</function>
<function name='cpSegmentShapeNew'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='a' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='b' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpShape*' type='^{cpShape=}'/>
</function>
<function name='cpSegmentShapeSetNeighbors'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpVect' name='prev' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='next' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeCacheBB'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpShapeDestroy'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpShapeFilterNew'>
<arg declared_type='cpGroup' name='group' type='L'/>
<arg declared_type='cpBitmask' name='categories' type='I'/>
<arg declared_type='cpBitmask' name='mask' type='I'/>
<retval declared_type='cpShapeFilter' type='{cpShapeFilter=III}'/>
</function>
<function name='cpShapeFree'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeGetArea'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapeGetBB'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpShapeGetBody'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpBody*' type='^{cpBody=}'/>
</function>
<function name='cpShapeGetCenterOfGravity'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpShapeGetCollisionType'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpCollisionType' type='L'/>
</function>
<function name='cpShapeGetDensity'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapeGetElasticity'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapeGetFilter'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpShapeFilter' type='{cpShapeFilter=III}'/>
</function>
<function name='cpShapeGetFriction'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapeGetGroup'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='uintptr_t' type='L'/>
</function>
<function name='cpShapeGetLayers'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='unsigned int' type='I'/>
</function>
<function name='cpShapeGetMass'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapeGetMoment'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapeGetSensor'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpShapeGetSpace'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=}'/>
</function>
<function name='cpShapeGetSurfaceVelocity'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpShapeGetUserData'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpShapeNearestPointQuery'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpVect' name='p' type='{cpVect=ff}'/>
<arg declared_type='cpPointQueryInfo*' name='out' type='^{cpPointQueryInfo=^{cpShape}{cpVect=ff}f{cpVect=ff}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapePointQuery'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpVect' name='p' type='{cpVect=ff}'/>
<arg declared_type='cpPointQueryInfo*' name='out' type='^{cpPointQueryInfo=^{cpShape}{cpVect=ff}f{cpVect=ff}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapeSegmentQuery'>
<arg const='true' declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpVect' name='a' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='b' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<arg declared_type='cpSegmentQueryInfo*' name='info' type='^{cpSegmentQueryInfo=^{cpShape}{cpVect=ff}{cpVect=ff}f}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpShapeSetBody'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetCollisionType'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpCollisionType' name='collisionType' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetDensity'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpFloat' name='density' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetElasticity'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpFloat' name='elasticity' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetFilter'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetFriction'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpFloat' name='friction' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetGroup'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='uintptr_t' name='group' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetLayers'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='unsigned int' name='layer' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetMass'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpFloat' name='mass' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetSensor'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpBool' name='sensor' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetSurfaceVelocity'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpVect' name='surfaceVelocity' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetUserData'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpDataPointer' name='userData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeUpdate'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpTransform' name='transform' type='{cpTransform=ffffff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpShapesCollide'>
<arg const='true' declared_type='cpShape*' name='a' type='^{cpShape=}'/>
<arg const='true' declared_type='cpShape*' name='b' type='^{cpShape=}'/>
<retval declared_type='cpContactPointSet' type='{cpContactPointSet=i{cpVect=ff}[2{?={cpVect=ff}{cpVect=ff}f}]}'/>
</function>
<function name='cpSimpleMotorAlloc'>
<retval declared_type='cpSimpleMotor*' type='^{cpSimpleMotor=}'/>
</function>
<function name='cpSimpleMotorGetRate'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSimpleMotorInit'>
<arg declared_type='cpSimpleMotor*' name='joint' type='^{cpSimpleMotor=}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='rate' type='f'/>
<retval declared_type='cpSimpleMotor*' type='^{cpSimpleMotor=}'/>
</function>
<function name='cpSimpleMotorNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpFloat' name='rate' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpSimpleMotorSetRate'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='rate' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointAlloc'>
<retval declared_type='cpSlideJoint*' type='^{cpSlideJoint=}'/>
</function>
<function name='cpSlideJointGetAnchorA'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpSlideJointGetAnchorB'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpSlideJointGetMax'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSlideJointGetMin'>
<arg const='true' declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSlideJointInit'>
<arg declared_type='cpSlideJoint*' name='joint' type='^{cpSlideJoint=}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='cpSlideJoint*' type='^{cpSlideJoint=}'/>
</function>
<function name='cpSlideJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpSlideJointSetAnchorA'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpVect' name='anchorA' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetAnchorB'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpVect' name='anchorB' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetMax'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetMin'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceAddBody'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpBody*' type='^{cpBody=}'/>
</function>
<function name='cpSpaceAddCollisionHandler'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpCollisionType' name='a' type='L'/>
<arg declared_type='cpCollisionType' name='b' type='L'/>
<retval declared_type='cpCollisionHandler*' type='^{cpCollisionHandler=II^?^?^?^?^v}'/>
</function>
<function name='cpSpaceAddConstraint'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=}'/>
</function>
<function name='cpSpaceAddDefaultCollisionHandler'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpCollisionHandler*' type='^{cpCollisionHandler=II^?^?^?^?^v}'/>
</function>
<function name='cpSpaceAddPostStepCallback'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpPostStepFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='cpSpace*' type='^{cpSpace=}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='key' type='^v'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpSpaceAddShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpShape*' type='^{cpShape=}'/>
</function>
<function name='cpSpaceAddStaticShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpShape*' type='^{cpShape=}'/>
</function>
<function name='cpSpaceAddWildcardHandler'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpCollisionType' name='type' type='L'/>
<retval declared_type='cpCollisionHandler*' type='^{cpCollisionHandler=II^?^?^?^?^v}'/>
</function>
<function name='cpSpaceAlloc'>
<retval declared_type='cpSpace*' type='^{cpSpace=}'/>
</function>
<function name='cpSpaceBBQuery'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<arg declared_type='cpSpaceBBQueryFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceContainsBody'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpSpaceContainsConstraint'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpSpaceContainsShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpSpaceDebugDraw'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpSpaceDebugDrawOptions*' name='options' type='^{cpSpaceDebugDrawOptions=^?^?^?^?^?i{cpSpaceDebugColor=ffff}^?{cpSpaceDebugColor=ffff}{cpSpaceDebugColor=ffff}^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceDestroy'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachBody'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpSpaceBodyIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachConstraint'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpSpaceConstraintIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpSpaceShapeIteratorFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceFree'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceGetCollisionBias'>
<arg const='true' declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetCollisionPersistence'>
<arg const='true' declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpTimestamp' type='I'/>
</function>
<function name='cpSpaceGetCollisionSlop'>
<arg const='true' declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetCurrentTimeStep'>
<arg const='true' declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetDamping'>
<arg const='true' declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetGravity'>
<arg const='true' declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function name='cpSpaceGetIdleSpeedThreshold'>
<arg const='true' declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetIterations'>
<arg const='true' declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceGetSleepTimeThreshold'>
<arg const='true' declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetStaticBody'>
<arg const='true' declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpBody*' type='^{cpBody=}'/>
</function>
<function name='cpSpaceGetUserData'>
<arg const='true' declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpSpaceInit'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=}'/>
</function>
<function name='cpSpaceIsLocked'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpSpaceNew'>
<retval declared_type='cpSpace*' type='^{cpSpace=}'/>
</function>
<function name='cpSpacePointQuery'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='maxDistance' type='f'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<arg declared_type='cpSpacePointQueryFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=}'/>
<arg declared_type='cpVect' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpVect' type='{cpVect=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePointQueryNearest'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpVect' name='point' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='maxDistance' type='f'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<arg declared_type='cpPointQueryInfo*' name='out' type='^{cpPointQueryInfo=^{cpShape}{cpVect=ff}f{cpVect=ff}}'/>
<retval declared_type='cpShape*' type='^{cpShape=}'/>
</function>
<function name='cpSpaceReindexShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexShapesForBody'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexStatic'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveBody'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveConstraint'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSegmentQuery'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpVect' name='start' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='end' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<arg declared_type='cpSpaceSegmentQueryFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=}'/>
<arg declared_type='cpVect' type='{cpVect=ff}'/>
<arg declared_type='cpVect' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSegmentQueryFirst'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpVect' name='start' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='end' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<arg declared_type='cpShapeFilter' name='filter' type='{cpShapeFilter=III}'/>
<arg declared_type='cpSegmentQueryInfo*' name='out' type='^{cpSegmentQueryInfo=^{cpShape}{cpVect=ff}{cpVect=ff}f}'/>
<retval declared_type='cpShape*' type='^{cpShape=}'/>
</function>
<function name='cpSpaceSetCollisionBias'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpFloat' name='collisionBias' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetCollisionPersistence'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpTimestamp' name='collisionPersistence' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetCollisionSlop'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpFloat' name='collisionSlop' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetDamping'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetGravity'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpVect' name='gravity' type='{cpVect=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetIdleSpeedThreshold'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpFloat' name='idleSpeedThreshold' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetIterations'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='int' name='iterations' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetSleepTimeThreshold'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpFloat' name='sleepTimeThreshold' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetUserData'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpDataPointer' name='userData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceShapeQuery'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=}'/>
<arg declared_type='cpSpaceShapeQueryFunc' function_pointer='true' name='func' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=}'/>
<arg declared_type='cpContactPointSet*' type='^{cpContactPointSet=i{cpVect=ff}[2{?={cpVect=ff}{cpVect=ff}f}]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function name='cpSpaceStep'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpFloat' name='dt' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceUseSpatialHash'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=}'/>
<arg declared_type='cpFloat' name='dim' type='f'/>
<arg declared_type='int' name='count' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpTransformAxialScale'>
<arg declared_type='cpVect' name='axis' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='pivot' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='scale' type='f'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformBoneScale'>
<arg declared_type='cpVect' name='v0' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformInverse'>
<arg declared_type='cpTransform' name='t' type='{cpTransform=ffffff}'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformMult'>
<arg declared_type='cpTransform' name='t1' type='{cpTransform=ffffff}'/>
<arg declared_type='cpTransform' name='t2' type='{cpTransform=ffffff}'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformNew'>
<arg declared_type='cpFloat' name='a' type='f'/>
<arg declared_type='cpFloat' name='b' type='f'/>
<arg declared_type='cpFloat' name='c' type='f'/>
<arg declared_type='cpFloat' name='d' type='f'/>
<arg declared_type='cpFloat' name='tx' type='f'/>
<arg declared_type='cpFloat' name='ty' type='f'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformNewTranspose'>
<arg declared_type='cpFloat' name='a' type='f'/>
<arg declared_type='cpFloat' name='c' type='f'/>
<arg declared_type='cpFloat' name='tx' type='f'/>
<arg declared_type='cpFloat' name='b' type='f'/>
<arg declared_type='cpFloat' name='d' type='f'/>
<arg declared_type='cpFloat' name='ty' type='f'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformOrtho'>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformPoint'>
<arg declared_type='cpTransform' name='t' type='{cpTransform=ffffff}'/>
<arg declared_type='cpVect' name='p' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpTransformRigid'>
<arg declared_type='cpVect' name='translate' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='radians' type='f'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformRigidInverse'>
<arg declared_type='cpTransform' name='t' type='{cpTransform=ffffff}'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformRotate'>
<arg declared_type='cpFloat' name='radians' type='f'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformScale'>
<arg declared_type='cpFloat' name='scaleX' type='f'/>
<arg declared_type='cpFloat' name='scaleY' type='f'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformTranslate'>
<arg declared_type='cpVect' name='translate' type='{cpVect=ff}'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformVect'>
<arg declared_type='cpTransform' name='t' type='{cpTransform=ffffff}'/>
<arg declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpTransformWrap'>
<arg declared_type='cpTransform' name='outer' type='{cpTransform=ffffff}'/>
<arg declared_type='cpTransform' name='inner' type='{cpTransform=ffffff}'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformWrapInverse'>
<arg declared_type='cpTransform' name='outer' type='{cpTransform=ffffff}'/>
<arg declared_type='cpTransform' name='inner' type='{cpTransform=ffffff}'/>
<retval declared_type='cpTransform' type='{cpTransform=ffffff}'/>
</function>
<function inline='true' name='cpTransformbBB'>
<arg declared_type='cpTransform' name='t' type='{cpTransform=ffffff}'/>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function inline='true' name='cpfabs'>
<arg declared_type='cpFloat' name='f' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpfclamp'>
<arg declared_type='cpFloat' name='f' type='f'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpfclamp01'>
<arg declared_type='cpFloat' name='f' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpflerp'>
<arg declared_type='cpFloat' name='f1' type='f'/>
<arg declared_type='cpFloat' name='f2' type='f'/>
<arg declared_type='cpFloat' name='t' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpflerpconst'>
<arg declared_type='cpFloat' name='f1' type='f'/>
<arg declared_type='cpFloat' name='f2' type='f'/>
<arg declared_type='cpFloat' name='d' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpfmax'>
<arg declared_type='cpFloat' name='a' type='f'/>
<arg declared_type='cpFloat' name='b' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpfmin'>
<arg declared_type='cpFloat' name='a' type='f'/>
<arg declared_type='cpFloat' name='b' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpv'>
<arg const='true' declared_type='cpFloat' name='x' type='f'/>
<arg const='true' declared_type='cpFloat' name='y' type='f'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvadd'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvclamp'>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpFloat' name='len' type='f'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvcross'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvdist'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvdistsq'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvdot'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpveql'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function inline='true' name='cpvforangle'>
<arg const='true' declared_type='cpFloat' name='a' type='f'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvlength'>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvlengthsq'>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvlerp'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpFloat' name='t' type='f'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvlerpconst'>
<arg declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<arg declared_type='cpFloat' name='d' type='f'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvmult'>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpFloat' name='s' type='f'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvnear'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpFloat' name='dist' type='f'/>
<retval declared_type='cpBool' type='C'/>
</function>
<function inline='true' name='cpvneg'>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvnormalize'>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvperp'>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvproject'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvrotate'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvrperp'>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvslerp'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpFloat' name='t' type='f'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvslerpconst'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpFloat' name='a' type='f'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvsub'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function inline='true' name='cpvtoangle'>
<arg const='true' declared_type='cpVect' name='v' type='{cpVect=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvunrotate'>
<arg const='true' declared_type='cpVect' name='v1' type='{cpVect=ff}'/>
<arg const='true' declared_type='cpVect' name='v2' type='{cpVect=ff}'/>
<retval declared_type='cpVect' type='{cpVect=ff}'/>
</function>
<function_alias name='cpPolylineConvexDecomposition_BETA' original='cpPolylineConvexDecomposition'/>
<function_alias name='cpcalloc' original='calloc'/>
<function_alias name='cpfacos' original='acosf'/>
<function_alias name='cpfatan2' original='atan2f'/>
<function_alias name='cpfceil' original='ceilf'/>
<function_alias name='cpfcos' original='cosf'/>
<function_alias name='cpfexp' original='expf'/>
<function_alias name='cpffloor' original='floorf'/>
<function_alias name='cpfmod' original='fmodf'/>
<function_alias name='cpfpow' original='powf'/>
<function_alias name='cpfree' original='free'/>
<function_alias name='cpfsin' original='sinf'/>
<function_alias name='cpfsqrt' original='sqrtf'/>
<function_alias name='cprealloc' original='realloc'/>
</signatures>
